{{Header}}
{{#seo:
|description=How to use Monero in {{project_name_long}}
|image=Moneroheader.png
}}
{{title|title=
Monero (XMR): A Reasonably Private Digital Currency
}}
[[File:Monero-symbol-1280.png|thumb|128px|256px|alt=Monero|link=Monero|Monero Logo]]
= What is Monero? =
Monero is a private-centric cryptocurrency launched in 2014 to allow direct and anonymous digital payments without being dependent on a central authority.

= Installation =

The [https://gitlab.com/whonix/monero-gui <code>monero-gui</code> package] is installed by default. No manual installation required. This goes for Monero programs, <code>monero-wallet-gui</code>, <code>monero-wallet-cli</code>, <code>monerod</code> and less frequently used utilities; see footnote. <ref>
* <code>monero-blockchain-ancestry</code>
* <code>monero-blockchain-usage</code>
* <code>monero-blockchain-mark-spent-outputs</code>
* <code>monero-blockchain-export</code>
* <code>monero-blockchain-import</code>
* <code>monero-wallet-gui</code>
* <code>monero-blockchain-depth</code>
* <code>monero-blockchain-prune</code>
* <code>monero-wallet-cli</code>
* <code>monerod</code>
* <code>monero-blockchain-stats</code>
* <code>monero-blockchain-prune-known-spent-data</code>
* <code>monero-gen-ssl-cert</code>
* <code>monero-wallet-rpc</code>
* <code>monero-gen-trusted-multisig</code>

The list is also here: https://gitlab.com/Whonix/monero-gui/tree/master/usr/bin
</ref>

Apart from these hints, installation and usage of Monero in {{project_name_long}} does not differ from installing Monero on any Linux based distribution.

= Version Numbers =
The [https://gitlab.com/whonix/monero-gui <code>monero-gui</code> package] is maintained <u>similar</u> to [[Operating_System_Software_and_Updates#Frozen_Packages|Debian stable frozen packages]]. <code>monero-gui</code> package updates will only include updates which are major releases or releases that fix security or network issues. <ref>
Such as fixes required if the Monero network is under denial of service (DOS) attacks.
</ref> This is to reduce the maintenance load of the package maintainer.

Should the user wish to use a newer version of Monero than available in the package, it is possible to [[#Uninstallation|uninstall the <code>monero-gui</code> package]]. (Uninstallation is optional if Monero is manually installed in home folder. <ref>
A manually installed Monero won't interfere with the <code>monero-gui</code> package. That is, unless the user installs Monero to folder <code>/usr/bin</code>. (Files in that folder would be replaced when the <code>monero-gui</code> package gets updated. However, the Monero start menu entry might be confusing since the start menu entry would start Monero from the <code>monero-gui</code> package (from  folder <code>/usr/bin</code>), and not the manually installed Monero.
</ref>) Since [[About#Based_on_Debian|{{project_name_long}} is based on Debian]], the user can optionally install Monero using the usual instructions from the Monero website. Recommendations from the [[Install_Software|safely installing software]] wiki page such as [[Verifying Software Signatures]] applies. See also [[Install_Software#Install_Newer_Software_Versions|Install Newer Software Versions]].

= Uninstallation =
To avoid any issues with [[Debian_Packages|{{project_name_long}} meta package]] removal, first install the <code>dummy-dependency</code> package.

{{install Package
|package=dummy-dependency
}}

Remove the <code>monero-gui</code> package.

{{CodeSelect|code=
sudo apt purge monero-gui
}}

Done, removal of the <code>monero-gui</code> package is complete.

= Forum Discussion =
* [https://forums.whonix.org/t/monero-xmr-gui-graphical-user-interface-and-cli-debian-package-testers-wanted/9479 Monero (XMR) GUI (Graphical User Interface) and CLI Debian Package - Testers Wanted!]

= Donations =
After installing Monero, please consider making a [[Donate|donation]] to {{project_name_long}} to help keep it running for many years to come.

{{Pay_Monero_Specific}}

= Credits =
Gratitude is expressed to the donors of Monero who funded the proposal [https://ccs.getmonero.org/proposals/adrelanos-debian-package.html Monero Debian Package Repository for 2 years], to [https://github.com/rehrar @rehrar] for helping the creator of the package ({{project_name_long}} developer Patrick Schleizer) with writing the proposal, everyone else who supported the proposal, and the community of Monero developers and users at large for creating Monero. <ref>
* https://repo.getmonero.org/monero-project/ccs-proposals/-/merge_requests/130
* https://www.reddit.com/r/Monero/comments/fc8c2j/whonix_lead_developer_wants_to_maintain_a_debian/
* https://forums.whonix.org/t/policy-for-inclusion-of-compiled-software/6635/print
* https://forums.whonix.org/t/monero-and-whonix-sitting-in-a-tree/5949/print
* https://gitlab.com/whonix/monero-gui
</ref>

Major updates will be posted here: https://repo.getmonero.org/monero-project/ccs-proposals/-/merge_requests/130

Development blog: https://forums.whonix.org/t/monero-and-whonix-sitting-in-a-tree/5949

= Appendix =

== Monero Architecture ==

Monero works by having contributors host large files which are equivalent to a public ledger. Any time someone broadcasts a transaction, every ledger maintainer updates their copy of the ledger and ensures no cheating or fraud has occurred. As with most cryptocurrencies, transactions are sent to Public Addresses which are derived from personally created private keys.

Since transactions could otherwise be traced by watching which addresses are sending to each-other, Monero uses a Diffie-Hellman key exchange using the transaction information on the sender's side and the public address on the receiver's end of a transaction to encrypt the recipients address on the ledger. To protect the sender, spending Monero is equivalent to forwarding the output of the previous transaction, so a users address is never stored on the ledger at all - this technique is called Stealth Addressing.

Since this solution is imperfect, and allows EABE attacks and is dependent on ECC for the key exchange, Monero uses a second layer of anonymity called Ring Signatures. When signing a transaction and broadcasting it to the network, Ring Signatures take signers from previous transactions and forge a new signature with Ring Size = N, where you cannot tell which entity in the group N actually authorized a transaction. This further obfuscates the blockchain and reduces the available attack vectors on the cryptocurrency as a whole, as well as introduces several zero knowledge proofs which prevent absolute analysis of the ledger.

Ring Signatures combined with Stealth Addressing prevent many attack vectors, but since new transactions are forwarded outputs from previous ones you can still perform analysis by viewing the amounts spent on-chain. To address this potential issue, a solution called RingCT was introduced which obfuscates the amount spent in a transaction.

Further attack vectors including cross-referencing an address posted in multiple places and IP leaks when connecting to the network are further developments sought out by the Monero community. These potential issues are addressed with Subaddresses and Kovri respectively.

== monero-gui package audit ==
This wiki chapter is for advanced users that wish to audit the [https://gitlab.com/kicksecure/monero-gui <code>monero-gui</code> package].

It is commendable when auditors are taking to to audit software for security issues, malware and/or backdoors. In some cases, there is a conceptual issue if the vendor of the monero-gui (Kicksecure / Whonix) is providing instructions how to audit its own software, see [[Verifying_Software_Signatures#Conceptual_Challenges_in_Digital_Signatures_Verification|Verifying Software Signatures - Kicksecure chapter Conceptual Challenges in Digital Signatures Verification]].

Prerequisite knowledge: {{kicksecure_wiki
|wikipage=Shell#Hidden_Text_Attacks
|text=Hidden Text Attacks chapter Hidden Text Attacks
}}

related:

* [https://www.reddit.com/r/Monero/comments/hvynq2/what_the_monero_community_could_do_to_improve_the/ What the Monero Community could do to improve the security of the monero-gui Debian Package]
* [[Trust]]
* forum discussion: [https://forums.whonix.org/t/how-to-verify-the-monero-binaries-that-are-shipped-with-whonix/16439 How to verify the Monero binaries that are shipped with Whonix?]

To confirm that the binaries are included in the monero-gui package are exactly the same as the binaries provided by original upstream [https://github.com/monero-project/monero-gui/releases monero-gui] project, apply the following steps.

Note: This process is [[unspecific|unspecific to Kicksecure, Whonix, monero-gui]]. Just a normal audit procedure. No special instructions should be provided. This is only documented as an example for educational purposes.

'''1.''' Clone the monero-gui git repository provided by Kicksecure / Whonix.

'''2.''' Change directory into the monero-gui folder.

Checkout the version number that should be verified.

'''3.''' Digital software signature verification of the git repository.

Optional. The latest git commits as well as all git tags are signed. This is just to verify that the git repository provider (github) did not not modify 

'''4.''' Version number detection, choice.

Some possibilities:

* A) Figure out the version number claimed by the monero-gui (by Kicksecure / Whonix) package. This could be done by looking at <code>hashes.txt</code> in the root of the folder.
* B) {{CodeSelect|code=
git log
}}
* C) {{CodeSelect|code=
git log --show-signature
}}
* D) git checkout an earlier version and optional git digital signature verification.

'''5.''' Get a list of all files and folders.

It is usually useful to exclude the <code>.git</code> folder.

{{CodeSelect|code=
find . -not -iwholename '*.git*'
}}

'''6.''' Verification strategy for the monero-gui git repository by Kicksecure / Whonix.

In theory, that means that each file needs to be either confirmed to to have the very same contents as a different trusted entity or be manually audited. In practice, this realistically means:

1) Binaries in the monero-gui git repository provided by Kicksecure / Whonix should be compared to have the same cryptographic hash as files provided by upstream mondero-gui.

{{CodeSelect|code=
sha512sum ./usr/bin/*
}}
{{CodeSelect|code=
sha512sum ./usr/share/doc/monero-gui/*
}}

These hashsums should match the the hashsums provided by binaries in the upstream mondero-gui download.

Make sure that no additional binaries have been added. Missing binaries might be an issue for other software but in case of optional functionality such as monero-gui, missing binaries might be a usability issue but not a security issue.

2) All files not included in 1) need to be manually audited by viewing these files in a text editor.

'''7.''' Verification strategy for the monero-gui Debian package by Kicksecure / Whonix.

Similar to above. Either, and/or:

* A) Rebuild the monero-gui Debian package.

Download the monero-gui Debian package by Kicksecure / Whonix. Extract its contents. Create hashsums to audit files where are also provided by upstream. For other files such as files in the <code>debian</code> folder, these need to be manually audited.

* B) Hashsum compare the monero-gui Debian package.

Build the monero-gui Debian package from the monero-gui git repository by Kicksecure / Whonix. When creating a hashsum of the created <code>.deb</code> should ideally match the hashsum of the of the <code>.deb</code> package available from the Kicksecure / Whonix repository. If it does not, which might happened because Debian's reproducible builds project is still a work in progress. Additoinally, reproducible packages by Kicksecure / Whonix (which depends on Debian's reproducible builds project) is also still a work in progress. In that case, the differences should be audited using [https://packages.debian.org/diffoscop <code>diffoscope</code>]. The differences however should only be minor things such as timestamps. The binaries should match.

'''8.''' Verification strategy an already installed monero-gui Debian package by Kicksecure / Whonix.

Optional.

The monero-gui Debian package by Kicksecure / Whonix has been manually installed or came installed by default with Kicksecure / Whonix? In that case, this optional point applies.

Notes:

* It is required for security that a software repository and/or software package is audited before installing it.
** Adding a third party repository and/or installing third-party software allows the vendor to replace any software on your system. Including but not limited to the installation of [[Malware|malware]], deleting files and data harvesting. See also  [[Install_Software#Foreign_Sources|Foreign Sources]] for further information.
** Once a repository has been added or a package without auditing it beforehand, the running system is to be considered as no longer trustworthy and potentially lying to the user. For example, when using the already running system to create a hashsum for an installed file such as <code>/usr/bin/monero-wallet-gui</code>, a [https://en.wikipedia.org/wiki/Rootkit rootkit] could show a different hashsum than the actual hashsum. The file being verified could also be legit while at the same time [[malware]] in form of a [https://en.wikipedia.org/wiki/Trojan_horse_(computing) trojan horse] stole user secrets such as the wallet's cryptographic keys.
** This is because if a software repository is added, it can replace any package on the system and it is therefore trivial to install malware.
** Even when only installing a package outside of the repository, not only files are installed. It is common practice that package installers can run scripts which could apply any malicious modification to the system whatsoever.
* When auditing for example a VM image or ISO, it is required for security to not execute any of the contents of that image because the code to be audited has be be considered as untrustworthy until the audit has been completed. In that case, the contents of the image need to be extracted or mounted. Note, that while helpful to audit small parts of an image, for best security all contents of the image need to be audited.

Steps:

Similar to above points 6 and 7.

1) Version number detection.

Find out the version number of the installed monero-gui Debian package by Kicksecure / Whonix.

{{CodeSelect|code=
dpkg -l {{!}} grep monero-gui     
}}

For example at time of writing that showed the following output.

<pre>
ii  monero-gui                                    0.18.1.2-1
</pre>

monero-gui Debian package by Kicksecure / Whonix version

'''Table:''' ''version comparision example: monero-gui Debian package by Kicksecure / Whonix versus monero-gui by upstream''

<div class="scroll-table">
{| class="wikitable"
! '''monero-gui Debian package by Kicksecure / Whonix version''' !! '''monero-gui upstream version''' !! '''part of version to ignore'''
|-

| <code>0.18.1.2-1</code>
| <code>0.18.1.2</code>
| <code>-1</code>
|-

|}
</div>

2) Download, verify, extract the corresponding monero-gui version by upstream.

3) Change directory into the extrated monero-gui folder.

4) Create hashsums of monero-gui by upstream.

5) Create hashsums of the installed monero-gui Debian package by Kicksecure / Whonix.

{{CodeSelect|code=
sha512sums /usr/bin/monero*
}}

6) Compare the hashsums.

* If these match, all is good.
* If not, that's bad. Double check if the correct version has been compared.

7) Done.

'''9.''' Automation.

Optional. Consider automating this process and setting up a server/process that regularity repeats this process.

'''10.''' Done.
*

= Footnotes =
The former [[Monero/Manual Instructions|Manual Monero Instructions]] have been archived for historic reasons.

{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]