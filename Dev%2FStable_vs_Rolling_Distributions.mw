{{Header}}
{{Title|title=
Stable vs Rolling Distributions - Development Considerations
}}
{{#seo:
|description=todo
}}
{{maintainability_mininav}}
{{intro|
todo
}}
= Malicious Backdoor Risk =
{| class="wikitable"
! Distribution Type
! No XZ Backdoor Exposure
! Reason
|-

| Stable
| {{Yes}}
| Slow adoption, extensive testing, not yet included
|-

| Rolling
| {{No}}
| Rapid updates, less time for vetting, included quickly
|-

|}

= Per-Application Rolling Requirement =

{| class="wikitable"
! Protocol
! No Rolling Requirement
! Reasoning
|-

| Matrix / SimpleX
| {{No}}
| The ecosystems move too fast and are too complex.
|-

| IRC
| {{Yes}} (if maintained)
| IRC is well-established. A non-rolling client is acceptable if the maintainer is active. Even if not, the risk of a security-critical bug is relatively low compared to Matrix clients.
|-

|}

= newer does not equate better =
* [[Dev/About_Computer_(In)Security#Too_Much_Source_Code|Too Much Source Code]]
* [[Dev/About_Computer_(In)Security#Scattered_Attention|Scattered Attention]]
* [[Dev/About_Computer_(In)Security#Code_Bloat|Code Bloat]]
* [[Dev/About_Computer_(In)Security#Lack_of_Minimalism|Lack of Minimalism]]
* [[Dev/About_Computer_(In)Security#Too_Much_Complexity|Too Much Complexity]]
* [[Dev/About_Computer_(In)Security#No_Final_Specification|No Final Specification]]

= secure from what =
IRC is:

* A tool to discuss topics with random strangers over the internet.

IRC has:

* An (almost) final specification. The IRC ecosystem does not move anymore (or moves really slow). The absence of ever changing millions of lines of source code, somewhat minimalism is good for security from remote code execution through specifically crafted incoming messages.

IRC is not:

* A tool to have confidential chats with known contacts.

{{Footer}}
[[Category:Design]]