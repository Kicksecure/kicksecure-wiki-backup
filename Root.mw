{{Header}}
{{Title|
title=Safely Use Root Commands
}}
{{#seo:
|description=Tips on using sudo / root (privileged) commands safely
|image=Root123123.jpg
}}
{{passwords_mininav}}
[[File:Root123123.jpg|250px|thumb]]
{{intro|
This page gives tips on using <code>sudo</code> / root (privileged) commands safely. The root account is a special user account in Unix-based operating systems that has complete access to all files and commands on a system. It is typically used only for system administration tasks that require unrestricted access.
}}

= Introduction =

Learn why 'root' is important, what it is used for, and how to use <code>sudo</code> / root (privileged) commands safely.

= Rationale for Protecting the Root Account =

{{Anchor|Rationale}}

What is the point on a typical single user Linux desktop computer of separating privileged administrator account (called <code>root</code> account) and limited user accounts (such as for example user <code>user</code>)?

It is assumed that most desktop computer users are single user computers. I.e. computers being used by only one person. Rather it is assumed that most users are only using a single login user account which will be referred to as user <code>user</code>.

Quote [https://xkcd.com/1200/ xkcd authorization]:

<blockquote>If someone steals my laptop while I'm logged in, they can read my email, take my money, and impersonate me to my friends, but at least they can't install drivers without my permission.</blockquote>

[https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root Quote] user discussion:

<blockquote>Most people will consider their home directory as more important than root dirs</blockquote>

<blockquote>Once a malicious program has access to my home folder, I don't care if it also has access to the admin content</blockquote>

This is true for most users using single user computers, using only one user account and no virtual machines. As a counter measure this is why this documentation [[Special:Search/compartmentalization|recommends compartmentalization]], that is, running different activities in different virtual machines or even on different hardware.

The rationale of <u>prevention of root compromise</u> has the following goals: <ref>
Also see: [[Dev/Strong_Linux_User_Account_Isolation|Permissions]].
</ref>

* <u>Protect the host operating system</u>: If using {{VM}}: It is much less likely that malware will break out of a virtual machine if it does not have root access within the VM. <ref>
https://github.com/QubesOS/qubes-issues/issues/2695#issuecomment-301316132
</ref>
* <u>Protection from rootkits</u>: Root access allow malware to install rootkits, which can be very difficult to detect and remove.
* <u>Protect the virtualizer</u>: It is harder to attack the virtualizer without root / kernel access. (Applies only when using virtual machines.)
* <u>Protect the hardware</u>: A compromised host operating system might result in malware infecting the hardware, i.e. malware could install a persistent hardware backdoor (such as in BIOS or other firmware) surviving even re-installation of the host operating system. In many cases, root access is required before hardware can be attacked. <ref>
For example flash utilities for Linux require root access. In theory, it's conceivable of software bugs in firmware or hardware resulting in hardware compromise without prior root compromise. No such examples happening in the wild were known to the author at time of writing.
</ref>
* <u>Protect against compromised non-root users</u>: it is harder for potentially compromised non-root users (such as <code>www-data</code>) to access user <code>user</code> or other parts of the system. This is important when considering that even single-user systems have many system-level user accounts.
* <u>Sandboxing</u>: Sandboxing applications can prevent applications getting exploited by attackers <ref>
An exploit or payload might require a function which is unavailable inside the sandbox.
</ref> or limit the severity of the exploit since if sandboxing is successfully, malware will be trapped inside the sandbox. Sandboxing is a lot harder, less efficient or even impossible when applications are running as root. See also [[AppArmor]], [[apparmor.d|<code>apparmor.d</code> (Full System AppArmor Profile)]] and [[sandbox-app-launcher]].

{{project_name_short}} implements various security hardening to [[Dev/Strong_Linux_User_Account_Isolation|Enforce Strong Linux User Account Isolation]].

Once proposal [[Dev/user-sysmaint-split|user-sysmaint-split - Multiple Boot Modes for Better Security]] has been implemented there will be a strong guidance for users to better separate their limited (everyday use) account (<code>user</code>) and administrative account (<code>sysmaint</code>). This would result in a robust [[root#Prevent Malware from Sniffing the Root Password|Prevention of Malware Sniffing the Root Password]].

= Default Passwords =

The default passwords for {{project_name_short}} are:

{{Default_Passwords}}

The default root account is locked (or should be locked). <ref>
In new builds of {{project_name_long}} version <code>15.0.0.3.6</code>. Earlier {{project_name_long}} builds did not lock the root account by default and should be locked.
</ref> This is a purposeful security feature -- see below for further details.

Users can [[Post_Install_Advice#Change_Passwords|change or set a password]] for security reasons if this is useful in their case based on this [[Default_Passwords#Information|Information]].

= Running with Root Access =

== Run with Administrative Rights ==
To run an application with root rights.

{{IconSet|h2|1}} '''Use a privilege elevation utility to run commands as root.'''

Note: Replace <code>command</code> with the actual command.

* {{cli}}: {{CodeSelect|inline=true|code=sudo command}}
* {{gui}}: See [[Root#Graphical_Applications_with_Root_Rights|Graphical Applications with Root Rights]].

{{IconSet|h2|2}} '''Password entry.'''

If a password has been configured, the utility will prompt for it.

== User Password versus Root Password ==

Tools such as sudo and lxsudo prompt for the user's password. This is different from the root password.

= Security and Best Practices =

== General Security Advice ==

Commands that require root permissions should be run individually using <code>sudo</code>. In all cases:

* Do not login as root.
* Do not run <code>sudo su</code>.

== Inappropriate Use of Root Rights ==
Do not think of root as a shortcut to fix issues.

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    =
It is very much discouraged to establish the following behavior:<br />
<code>application problem</code> &rarr; "try <code>sudo</code> / root".

Only use <code>sudo</code> / <code>lxsudo</code> / root if there is a strong rationale for doing so. Otherwise...
}}

Inappropriate Use of Root Rights:

* Can cause additional non-security related issues. <ref>
* Applications supposed to be run as user but run as root might create root owned files. These file permissions error can lead to additional issues.
* Inter process communications such as with dbus might be broken.
</ref> Related is also later chapter [[#Graphical Applications with Root Rights|Graphical Applications with Root Rights]].
* Risks harmful code being run as root.

= Graphical Applications and Root Rights =

{{Anchor|Graphical_Applications_with_Root_Rights}}

{{IconSet|h2|1}} '''Do not run graphical user interface (GUI) with <code>sudo</code>!'''

It is discouraged to run [https://www.computerhope.com/jargon/g/gui.htm graphical user interface (GUI)] applications with <code>sudo gui-application</code>.

* Never login as <code>root</code> as explained above.
* This includes, never use <code>sudo su</code> and then start GUI applications.

Doing so would be an [[#Inappropriate Use of Root Rights|Inappropriate Use of Root Rights]]. That would fail in many cases and is a limitation inherited from Debian. If this action is attempted, error messages like those below will appear. <ref>
* https://help.ubuntu.com/community/RootSudo#Graphical_sudo
* https://www.psychocats.net/ubuntu/graphicalsudo
</ref>

<pre>
No protocol specified
</pre>

<pre>
cannot connect to X server :0
</pre>

{{IconSet|h2|2}} '''If there is a legitimate reason to start GUI applications with root rights, use <code>lxsudo</code> instead.''' <ref>
* Reason primarily: not breaking the system, reliability. Non-reason: security.
* https://askubuntu.com/questions/270006/why-should-users-never-use-normal-sudo-to-start-graphical-applications
* In past there was <code>gksudo</code>, <code>kdesudo</code>. Nowadays with more and more applications using PolicyKit or polkit, these applications are no longer available as of Debian <code>buster</code>. <code>lxsudo</code> is an alternative.
</ref> Syntax:

{{CodeSelect|code=
lxsudo application-name
}}

For example to start the partition manager <code>gparted</code> by default with root rights.

{{CodeSelect|code=
lxsudo gparted
}}

<ref>
<code>sudo</code> with <code>-H</code> / <code>--set-home</code> would also be OK. Syntax:
{{CodeSelect|code=
sudo -H application-name
}}

Or.

{{CodeSelect|code=
sudo --set-home application-name
}}

For example to start the partition manager <code>gparted</code> by default with root rights.

{{CodeSelect|code=
sudo -H gparted
}}

Or.

{{CodeSelect|code=
sudo --set-home gparted
}}
</ref>

{{IconSet|h2|3}} '''To edit files which can only be edited with root rights. Use the following syntax.'''

Note: Replace <code>/path/to/file/name</code> with the actual path to the file.

{{Open with root rights|filename=
/path/to/file/name
}}

For example:

{{Open with root rights|filename=
/etc/default/keyboard
}}

== Polkit PolicyKit pkexec for GUI applications ==
{{Anchor|Polkit_PolicyKit_pkexec}}

Use of [https://en.wikipedia.org/wiki/Polkit Polkit] (formerly PolicyKit) (<code>pkexec</code>) might also be appropriate for running GUI applications with root rights. Usually such applications should have desktop shortcuts or wrappers which make use of <code>pkexec</code>. There are no (or rare) known cases where users need to run <code>pkexec</code> on the command line.

== Wayland ==

Running GUI applications as root (<code>lxsudo</code>, <code>sudo --set-home</code>, <code>pkexec</code> will be more difficult once {{project_name_long}} has been ported from X11 to Wayland. This is because Wayland requires applications to access <code>$XDG_RUNTIME_DIR/$WAYLAND_SOCKET</code> to open GUI windows. <ref>https://unix.stackexchange.com/a/423287/535873</ref> You may run into this when using [[Other Desktop Environments]] using Wayland.

The following command should work to run Wayland applications as root in most instances. Replace <code>application-name</code> as appropriate:

{{CodeSelect|code=
sudo XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR application-name
}}

= Root Account Management =
{{Anchor|Root_Account}}

== Enable Root Account ==

For [[#Rationale|security reasons]] the root account is locked and expired by default in {{project_name_short}} <code>15.0.0.3.6</code> and above. For most users there should be no need to use the root account. If it must be enabled for some reason, run the following commands.

([[Qubes|{{q_project_name_long}}]]: {{project_name_gateway_long}} Template)

If you can use <code>sudo</code>, you can skip the following box.

{{box|text=
If you cannot use <code>sudo</code>:

* [[{{non_q_project_name_short}}|{{non_q_project_name_short}}]]: Boot into [[Recovery#Recovery_Mode|recovery mode]].
* [[Qubes|{{q_project_name_short}}]]: Open a [[#qubes root console|Qubes Root Console]].
}}

{{IconSet|h2|1}} Unexpire the root account.

{{CodeSelect|code=
sudo chage --expiredate -1 root
}}

{{IconSet|h2|2}} Set a root password.

According to the [[Post_Install_Advice#Change_Password|Change Password]] instructions. Note: These instructions are for the user <code>user</code> account. Replace user <code>user</code> with <code>root</code>.

== Disable Root Account ==

[[Old Stable and Earlier Releases|Earlier versions]] of {{project_name_short}} (version numbers lower than <code>15.0.0.3.6</code>) come with the root account enabled by default. Most users should disable it by running the following commands.

([[Qubes|{{q_project_name_short}}]]: {{project_name_gateway_short}} Template).

Lock the account.

{{CodeSelect|code=
sudo passwd --lock root
}}

<ref>
No longer expiring the root account since this broke adduser, see: https://forums.whonix.org/t/restrict-root-access/7658/59

(To prevent SSH login, see: [https://www.cyberciti.biz/faq/linux-locking-an-account/ Linux Locking An Account]. This might prevent other login methods but this requires further investigation.)

{{CodeSelect|code=
sudo chage --expiredate 0 root
}}
</ref>

In the future, [[#General Security Advice|use <code>sudo</code> instead]] when it is necessary.

{{Anchor|unlock}}

== Avoid Root Login ==

Should the user login as <code>root</code>? No. See footnote for rationale. <ref>
{{anchor_link|avoid_root_login_details}}
Why not login as root? This is for reasons of history, legacy.

Even during the times of X11, <code>root</code> login was frowned upon.

Therefore for strong user isolation, logging in as <code>root</code> user is to be avoided.

In an ideal world, the extra <code>sysmaint</code> user would be unnecessary and people could simply use the <code>root</code> user. Or even better, all references to <code>root</code> would be removed and replaced with <code>sysmaint</code>. However, this kind of education and convincing among many upstream projects for the purpose of [[Dev/Strong Linux User Account Isolation]] is totally unrealistic for organisational reasons, which are elaborated on the [[Linux User Experience versus Commercial Operating Systems]] page.
</ref>

{{sdebian
|link=https://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#idm1382
|text=Using su
}}

= Troubleshooting =
== Permissions Fix ==

After [[#Inappropriate Use of Root Rights|inappropriate use of root rights]], attempt to fix:

{{Open a product ws terminal}}

Run the following command to reset permissions of user <code>user</code>'s home folder <code>/home/user</code> back to owner <code>user</code> and group <code>user</code>.

{{CodeSelect|code=
sudo chown --recursive user:user /home/user
}}

== Reset User Account Password ==
The following steps can be used in case the password has been forgotten and needs to be reset.

{{Box|text=
{{IconSet|h2|1}} '''Launch a root terminal.'''

* [[{{non_q_project_name_short}}|{{non_q_project_name_short}}]]: Boot into [[Recovery#Recovery_Mode|recovery mode]].
* [[Qubes|{{q_project_name_short}}]]: Open a [[#qubes root console|Qubes Root Console]].

{{IconSet|h2|2}} '''Notes'''.

* This process will be similar to the [[Post_Install_Advice#Change_Password|change password]] wiki chapter which is recommended to read as it contains instructions / links on how to change and test the keyboard layout.
* This is [[unspecific|unspecific to {{project_name_short}}]]. It should be a very similar process on Debian or most other Linux distributions. It can also be resolved as per [[Self Support First Policy]].

{{IconSet|h2|3}} '''Set a new password.'''

Run the following command.

{{CodeSelect|code=
sudo passwd user
}}

{{IconSet|h2|4}} '''Reboot.'''

{{CodeSelect|code=
sudo reboot
}}

{{IconSet|h2|5}} '''Done.'''

The process of password reset has been completed.
}}

== Unlock User Account: Excessive Wrong Password Entry Attempts ==

The following steps can be used in case the user entered the wrong password too many times, which resulted in the user account being automatically locked. (This is related to security feature [[Dev/Strong_Linux_User_Account_Isolation#Bruteforcing_Linux_User_Account_Passwords_Protection|Bruteforcing Linux User Account Passwords Protection]].)

{{Box|text=
{{IconSet|h2|1}} '''Launch a terminal that can run commands as root.'''

If you cannot login anymore, see the bullet points below:

* [[{{non_q_project_name_short}}|{{non_q_project_name_short}}]]: Boot into [[Recovery#Recovery_Mode|recovery mode]].
* [[{{q_project_name_short}}|{{q_project_name_short}}]]: Open a [[#qubes root console|Qubes Root Console]].

{{IconSet|h2|2}} '''Run the following command.'''

<u>Note:</u> Replace <code>user</code> with the actual name of the user that you wish to unlock.

{{CodeSelect|code=
sudo faillock --user user --reset
}}

{{IconSet|h2|3}} '''Done.'''

Unlocking of user account has been completed.
}}
{{Anchor|console}}

== Console Unlock ==

{{Box|text=
{{IconSet|h2|1}} '''Launch a root terminal.'''

* [[{{non_q_project_name_short}}|{{non_q_project_name_short}}]]: Boot into [[Recovery#Recovery_Mode|recovery mode]].
* [[Qubes|{{q_project_name_short}}]]: Open a [[#qubes root console|Qubes Root Console]].

{{IconSet|h2|2}} '''Run the following command.'''

Note: Replace <code>user</code> with the Linux user account name which should be allowed to login on the [[login]] console.

{{CodeSelect|code=
sudo adduser user console
}}
}}

= Advanced Users =
== Prevent Malware from Sniffing the Root Password ==
== Rationale for Separate sysmaint Account ==
{{anchor|Rationale for Separate admin Account}}

If Linux user account <code>user</code> is compromised, malware can easily steal the administrative ("<code>sudo</code>") password. <ref>
Any graphical application can see what is typed in another graphical application, for any user.

[https://blog.invisiblethings.org/2011/04/23/linux-security-circus-on-gui-isolation.html Quote] Joanna Rutkowska, security researcher, founder and advisor (formerly architecture, security, and development) of Qubes OS:

<blockquote>
One application can sniff or inject keystrokes to another one, can take snapshots of the screen occupied by windows belonging to another one, etc.
</blockquote>

If an application is compromised with an exploit due to a security vulnerability, it can be used as malware by the attacker. Once/if the application is not effectively confined by a mandatory access control (MAC) framework like AppArmor or firejail, it can compromise the user account where it is running and then proceed from there.

See also [[Dev/Strong_Linux_User_Account_Isolation#sudo_password_sniffing|sudo password sniffing]] for technical details.
</ref> Therefore it is more secure ([[#Rationale|rationale)]] to perform administrative actions such as running <code>sudo</code> from a separate <code>sysmaint</code> account that is less likely to get compromised, since this reduces the chances of malware sniffing the password to escalate to administrative ("root") access.

The basic concept is a separation of the following users:

* '''user <code>user</code>:''' Perform everyday actions such as running web browsers.
* '''user <code>sysmaint</code>:''' Perform system maintenance administrative actions such as installing additional packages.

Questions and answers:

* Is running applications such as browser under user <code>sysmaint</code> less secure? Yes, that defeats this concept.
* Is running applications such as browser under user <code>user</code> more secure? Yes, because it becomes harder for malware to perform privilege escalation attacks to gain to administrative ("root") access.
* What is so bad about malware escalating to administrative? See [[#Rationale|rationale]].
* Why use user <code>sysmaint</code> and not simply the <code>root</code> user? See [[Root#Avoid_Root_Login|Avoid Root Login]].

This process is currently for advanced users only since it is quite cumbersome, i.e. has bad usability. The usability of this will be improved once proposal [[Dev/user-sysmaint-split|user-sysmaint-split - Multiple Boot Modes for Better Security]] has been implemented.

=== Overview of Steps ===
To more securely perform administrative tasks that require root access, see the following overview steps below. Detailed technical steps are available further below.

# Prerequisite knowledge: [[Desktop#Virtual_Consoles|how to switch to a different virtual console]], [[SysRq|usage of the SysRq key]] and [[Login spoofing|login spoofing]].
# These instructions are ideally applied after installing the host / VM when it is still considered free of [[Malware and Firmware Trojans|malware]].
# Create a new user account <code>sysmaint</code>.
# Add it to the group <code>sudo</code>.
# Login as user <code>sysmaint</code>.
# Remove user <code>user</code> from group <code>sudo</code>.
# Only then perform administrative tasks according to the instructions below.

=== Detailed Steps ===

This setup only needs to be completed once.

{{IconSet|h2|1}} '''Platform specific notice:'''

* {{non_q_project_name_short}}: No special notice.
* ([[Qubes|{{q_project_name_short}}]]: {{project_name_workstation_long}} Template)

{{IconSet|h2|2}} '''Create a new user account <code>sysmaint</code>.'''

{{CodeSelect|code=
sudo adduser sysmaint
}}

{{IconSet|h2|3}} '''Add user <code>sysmaint</code> to group <code>sudo</code> and <code>console</code>.'''

{{CodeSelect|code=
sudo adduser sysmaint sudo
}}

Allow login into [[login]] console.

{{CodeSelect|code=
sudo adduser sysmaint console
}}

{{IconSet|h2|4}} '''Perform the following steps securely using <code>sudo</code>. Use <u>one</u> of the methods below.'''

{{Tab
|type=controller
|content=
{{Tab
|title= ===Non-GUI Environment Method===
|type=section
|content=

* Advantage: can keep current user session(s) and/or graphical session (X Window System) running.
* Disadvantages: cannot use graphical session during administrative tasks <ref>
Unless perhaps advanced users manage to run a different X server on a different virtual console. This might not be possible, secure. Depends on if the exclusive lock of X can be suspended while using an X server in a different virtual console. This has not been researched.
</ref> and requires SysRq, which is [[SysRq#Kicksecure_Default_SysRq_Configuration|disabled by default in Kicksecure for security reasons]].

{{IconSet|h3|1}} [[SysRq#Enable_SysRq|Enable SysRq]].

{{IconSet|h3|2}} Make sure keyboard gets disconnected from X Window System to [[Login spoofing|defeat login spoofing]]. (<code>unraw</code>) <ref name=unraw-required-questionmark>
This step might be unnecessary. Not researched yet.
</ref>

[[SysRq]] + <code>w</code>

(Press <code>Alt + SysRq + w</code>)

{{IconSet|h3|3}} Switch to another [[Desktop#Virtual_Consoles|virtual console]].

(Press <code>Alt + Crtl + F2</code>) <ref>
Pressing <code>Alt + Crtl + F7</code> results in <code>tty2</code>.

This is to make these instructions compatible with most Linux distributions as well as Qubes.

* Most Linux distributions login CLI virtual consoles on <code>tty1</code> (<code>Alt + Crtl + F1</code>) by default and X Window System on <code>tty7</code> (<code>Alt + Crtl + F7</code>).
* Qubes X Window System by default runs on <code>tty1</code>. (<code>Alt + Crtl + F1</code>)

<code>tty2</code> (<code>Alt + Crtl + F2</code>) will be for most users an unused virtual console which can be used for the purpose of this chapter.
</ref>

{{IconSet|h3|4}} Press Secure Access Key also to [[Login spoofing|defeat login spoofing]].

[[SysRq]] + <code>k</code>

(Press <code>Alt + SysRq + k</code>)

{{IconSet|h3|5}} Login as user <code>sysmaint</code> from that non-graphical environment ([[Desktop#Virtual_Consoles|virtual console]]). <ref>
An X Window System non-root user cannot sniff keystrokes of different (non-)root users utilizing a different virtual console (<code>tty</code>).
</ref>

{{IconSet|h3|6}} Perform any necessary administrative tasks.

{{IconSet|h3|7}} Remove user <code>user</code> from group <code>sudo</code>.

<u>Note</u>: This only needs to be performed once.

{{CodeSelect|code=
sudo delgroup user sudo
}}

{{IconSet|h3|8}} Logout user <code>sysmaint</code>.

{{CodeSelect|code=
logout
}}

{{IconSet|h3|9}} Switch back to previous virtual console.

X Window System runs in:

* most Linux distributions: virtual console <code>7</code> (Press <code>Alt + Crtl + F7</code>)
* Qubes: virtual console <code>1</code> (Press <code>Alt + Crtl + F1</code>)

{{IconSet|h3|10}} Re-login if needed and continue usual work as user <code>user</code>.
}}

{{Tab
|title= ===Logout Method===
|type=section
|content=

* Advantage: can use graphical session (X Window System) during administrative tasks using privileged user <code>sysmaint</code>.
* Disadvantage: cannot keep graphical session of unprivileged user <code>user</code> running. In other words, simplified, all applications run under user <code>user</code> will be terminated <ref>
Non-simplified: applications run by user <code>user</code> in a different virtual console or run through systemd (user) services can be left running.
</ref> and requires SysRq, which is [[SysRq#Kicksecure_Default_SysRq_Configuration|disabled by default in Kicksecure for security reasons]].

{{IconSet|h3|1}} Terminate all running applications in current graphical (X) session.

{{IconSet|h3|2}} Log out.

start menu -> log out

{{IconSet|h3|3}} Make sure keyboard gets disconnected from X Window System to [[Login spoofing|defeat login spoofing]]. (unra<code>w</code>) <ref name=unraw-required-questionmark />

[[SysRq]] + <code>w</code>

(Press <code>Alt + SysRq + w</code>)

{{IconSet|h3|4}} Press Secure Access Key also to [[Login spoofing|defeat login spoofing]].

[[SysRq]] + <code>k</code>

(Press <code>Alt + SysRq + k</code>)

{{IconSet|h3|5}} Login as user <code>sysmaint</code>.

{{IconSet|h3|6}} Perform any necessary administrative tasks.

{{IconSet|h3|7}} Remove user <code>user</code> from group <code>sudo</code>.

<u>Note</u>: This step only needs to be performed once.

{{CodeSelect|code=
sudo delgroup user sudo
}}

{{IconSet|h3|8}} Logout user <code>sysmaint</code>.

{{IconSet|h3|9}} Re-login as user <code>user</code>.

{{IconSet|h3|10}} Continue usual work as user <code>user</code>.
}}

{{Tab
|title= ===Power-off and Power-on Cycle Method===
|type=section
|content=

* Advantages: Use graphical session during administrative tasks. No need for complicated user of SysRq.
* Disadvantages: Cannot keep graphical session of unprivileged user <code>user</code> running. In other words, simplified, all applications run under user <code>user</code> will be terminated.

{{IconSet|h3|1}} Power off.

Shutdown the system. Really power off. Not shutdown. Why? To defeat [[login spoofing]].

{{IconSet|h3|2}} Power on.

{{IconSet|h3|3}} Do not login as user <code>user</code>.

{{IconSet|h3|4}} Login as user <code>sysmaint</code>.

{{IconSet|h3|5}} Perform any necessary administrative tasks.

{{IconSet|h3|6}} Remove user <code>user</code> from group <code>sudo</code>.

<u>Note</u>: This step only needs to be performed once.

{{IconSet|h3|7}} Power off.

{{IconSet|h3|8}} Continue usual work as user <code>user</code>.
}}

}}

== Substitute User (su) Command ==

The majority of users do not need to utilize the <code>su</code> command. <ref>
<code>su</code> is sometimes incorrectly referred to as the ''superuser'' command. [http://www.linfo.org/su.html It allows]:

<blockquote>
... a change to a login session's owner (i.e., the user who originally created that session by logging on to the system) without the owner having to first log out of that session.

Although su can be used to change the ownership of a session to any user, it is most commonly employed to change the ownership from an ordinary user to the root (i.e., administrative) user, thereby providing access to all parts of and all commands on the computer or system.
</blockquote>

By comparison, <code>sudo</code> makes it possible to execute system commands without the root password.
</ref>.

In {{project_name_short}}, by default:

* [https://github.com/{{project_name_short}}/security-misc/blob/master/usr/share/pam-configs/wheel-security-misc group <code>sudo</code> membership is required to use <code>su</code>]. <ref>
Implemented in package [https://github.com/{{project_name_short}}/security-misc security-misc].
</ref>
* User <code>user</code> is a member of group <code>sudo</code>. ([[Dev/user-sysmaint-split|This might change in a later release.]])

{{Box|text=
To permit the <code>su</code> command from user <code>user</code>, complete the following steps.

([[Qubes|{{q_project_name_short}}]]: perform these steps in {{project_name_gateway_short}} Template.)

{{IconSet|h2|1}} '''[[#Enable Root Account|Enable the root account]].'''

{{IconSet|h2|2}} '''Add user <code>user</code> to group <code>root</code>.'''

{{CodeSelect|code=
sudo adduser user root
}}

{{IconSet|h2|3}} '''[[SUID_Disabler_and_Permission_Hardener#Re-enable_Specific_SUID_Binaries|Re-enable SUID]].'''

Set suid. Note: It is okay if the second command fails.

{{CodeSelect|code=
sudo permission-hardener disable /bin/su
sudo permission-hardener disable /usr/bin/su
}}

<ref>
{{CodeSelect|code=
sudo chmod 4755 /bin/su
sudo chmod 4755 /usr/bin/su
}}
</ref>

{{IconSet|h2|4}} '''[[SUID_Disabler_and_Permission_Hardener#Whitelist_Specific_SUID_Binaries|Add SUID whitelisting]].'''

{{CodeSelect|code=
sudo mkdir -p /etc/permission-hardener.d
}}

{{Open with root rights|filename=
/etc/permission-hardener.d/20_user.conf
}}

Add.

{{CodeSelect|code=
/bin/su exactwhitelist
/usr/bin/su exactwhitelist
}}

{{IconSet|h2|5}} '''Save.'''

{{IconSet|h2|6}} '''Done.'''

Steps to permit <code>su</code> command from user <code>user</code> are complete.
}}
{{Anchor|login}}

== Root Login ==

Root login within a [[Desktop#Virtual_Consoles|virtual console]] will be disabled by default after upgrades. <ref>security-misc <code>[https://github.com/{{project_name_short}}/security-misc/blob/master/etc/securetty.security-misc /etc/securetty]</code> is empty by default.</ref> <ref>When trying to login as root in a [[Desktop#Virtual_Consoles|virtual console]] it will reply: <blockquote>
Login incorrect.</blockquote> Without previously asking for a password. This is not the worst case for usability and is better than asking for password and then failing.
</ref>

To enable login from a [[Desktop#Virtual Console|virtual console]], first apply the [[#Enable Root Account|Enable Root Account]] instructions further above, then complete the steps below.
{{Box|text=
{{IconSet|h2|1}} '''To allow root login, <code>/etc/securetty</code> must be configured. <ref>'''
<code>sudoedit</code> will not follow symlinks, therefore <code>realpath</code> is used.
</ref>

{{Open with root rights|filename=
$(realpath /etc/securetty)
}}

{{IconSet|h2|2}} '''Add the following content.'''

<u>Note</u>: Add one or more tty depending on your circumstances; see file <code>/etc/securetty.security-misc-orig</code>.

* [[{{non_q_project_name_short}}|{{non_q_project_name_short}}]]:
{{CodeSelect|code=
tty1
tty2
tty3
tty4
tty5
tty6
tty7
tty8
tty9
tty10
}}

* [[Qubes|{{q_project_name_short}}]]:
{{CodeSelect|code=
hvc0
}}

{{IconSet|h2|3}} '''Save the file.'''
}}

== Recovery Mode ==
Root login is possible using [[Recovery#Recovery_Mode|recovery mode]]. <ref>
https://forums.whonix.org/t/restrict-root-access/7658/46
</ref>

When the root account is disabled, passwordless root login using recovery mode is possible; see below for the security impact.

== Passwordless Recovery Mode Security Discussion ==
This is only relevant on the host and not inside virtual machines.

Passwordless recovery mode is allowed because a locked root password would break the rescue and emergency shell. Therefore the [https://github.com/{{project_name_short}}/security-misc security-misc] package enables a passwordless rescue and emergency shell. This is the same solution that Debian will likely adapt for Debian installer. <ref>
* https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=802211
* /etc/systemd/system/emergency.service.d/override.conf
* /etc/systemd/system/rescue.service.d/override.conf
</ref>

With passwordless root login, using recovery mode is allowed (through use of the security-misc package) on the host. To prevent adverse security effects posed by lesser adversaries with physical access to the machine, set up BIOS password protection, bootloader grub password protection and/or [[Full_Disk_Encryption|full disk encryption]].

{{anchor|qubes root console}}

== Qubes Root Console ==
The following will open a root console inside a Qubes VM.

Choose an option.

{{Tab
|type=controller
|content=
{{Tab
|title= === Using qvm-console-dispvm ===
|type=section
|active=true
|content=
Using <code>qvm-console-dispvm</code> might be more secure then <code>qvm-run</code>. <ref>
<code>qvm-console-dispvm</code> runs the terminal-emulator in a Disposable, which can login into a separate [[Desktop#Virtual_Consoles|virtual console]].
</ref>

{{IconSet|h2|1}} '''Open a dom0 terminal.'''

<code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>System Tools</code> &rarr; <code>Xfce Terminal
</code>

{{IconSet|h2|2}} '''Run the following command.''' <ref>
<code>dom0</code>:

* help: {{CodeSelect|inline=true|code=
qvm-console-dispvm --help
}}
* source code:
** {{CodeSelect|inline=true|code=
cat /usr/bin/qvm-console-dispvm
}}
** {{CodeSelect|inline=true|code=
cat /etc/qubes-rpc/admin.vm.Console
}}
</ref>

<u>Note:</u> Replace <code>vm-name</code> with the name of the actual VM where you want to open a root console.

{{CodeSelect|code=
qvm-console-dispvm vm-name
}}

{{IconSet|h2|3}} '''Done.'''

A Qubes root console will now be available.
}}

{{Tab
|title= === Using qvm-run ===
|type=section
|content=
{{IconSet|h2|1}} '''Open a dom0 terminal.'''

<code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>System Tools</code> &rarr; <code>Xfce Terminal
</code>

{{IconSet|h2|2}} '''Run the following command.'''

<u>Note:</u> Replace <code>vm-name</code> with the name of the actual VM where you want to open a root console.

{{CodeSelect|code=
qvm-run -u root vm-name xfce4-terminal
}}

{{IconSet|h2|3}} '''Done.'''

A Qubes root console will now be available.
}}

}}

== Qubes Passwordless Root Access Setup ==
The following can be used to set up passwordless root access for specific Qubes VMs.

{{Box|text=
{{IconSet|h2|1}} '''Open a [[#Qubes Root Console|Qubes Root Console]].'''

{{IconSet|h2|2}} '''Temporary passwordless root access until reboot.'''

Run the following command.

{{CodeSelect|code=
echo "user ALL=(ALL:ALL) NOPASSWD:ALL" {{!}} EDITOR=tee visudo -f /etc/sudoers.d/nopassword >/dev/null
}}

{{IconSet|h2|3}} '''Permanent passwordless root access after reboot.'''

Run the following command.

{{CodeSelect|code=
echo 'echo "user ALL=(ALL:ALL) NOPASSWD:ALL" {{!}} EDITOR=tee visudo -f /etc/sudoers.d/nopassword >/dev/null' {{!}} tee -a /rw/config/rc.local >/dev/null
}}

{{IconSet|h2|4}} '''Make Qubes VM specific startup script <code>/rw/config/rc.local</code> executable.'''

{{CodeSelect|code=
chmod +x /rw/config/rc.local
}}

{{IconSet|h2|5}} '''Done.'''
}}

NOTE: In 17.2.3.8 and above this can be simplified to 1 command.

{{CodeSelect|code=
passwordless-root
}}

{{Anchor|dsudo}}

== dsudo - default password sudo ==
<code>dsudo</code> is a {{project_name_short}} specific feature. <ref>
https://forums.whonix.org/t/dsudo-default-password-sudo/8766
</ref>

As long as still using the [[#Default Password|default password]] (not having [[Post_Install_Advice#Change_Passwords|changed sudo password]]), commands can be run as root without entering a password. This is useful for users having issues with [[Keyboard Layout|changing the keyboard layout]] and for testing VMs.

Instead of using

{{CodeSelect|code=
sudo
}}

use

{{CodeSelect|code=
dsudo
}}

== passwordless-root ==
After [[Dev/user-sysmaint-split|Role-Based Boot Modes (user versus sysmaint)]] has been implemented, some users may want to get back to traditional way of allowing user <code>user</code> to use <code>sudo</code>. In this case, see [[unrestricted admin mode]].

{{project_name_long}} version TODO and above will come with [https://github.com/Kicksecure/usability-misc/blob/master/usr/bin/passwordless-root <code>/usr/bin/passwordless-root</code>]. A tool to easily set up passwordless <code>sudo</code> for user <code>user</code>.

Execution of <code>passwordless-root</code> requires administrative ("<code>root</code>") rights.

1. Gain root rights.

Platform specific:

* Non-Qubes: The computer user must be booted into <code>sysmaint</code> mode first. How? See [[sysmaint]].
* Qubes: The computer user needs to open a [[Root#Qubes_Root_Console|Qubes Root Console]]. <code>passwordless-root</code> can simplify [[Root#Qubes_Passwordless_Root_Access_Setup|Qubes Passwordless Root Access Setup]].

2. Run the passwordless-root command.

{{CodeSelect|code=
passwordless-root
}}

3. Done.

= Definitions =
== Rooted ==
{{anchor|Definition of Rooted}}
What does it mean to be "rooted"? The word "rooted" in the context of computer security, smartphones, and root isolation is used in different ways.

A device can get "rooted" by at least two different entities:

* A) '''user''': Intentional rooting by the user grants them full administrative rights and is typically carried out to overcome restrictions imposed by the manufacturer or operating system (e.g., to uninstall bloatware or customize the OS).
* B) '''malware''': Malware-induced rooting occurs when malicious software exploits vulnerabilities to gain privileged access without user consent, often for nefarious purposes such as installing malicious programs, gaining deeper access to sensitive data, malware persistence.

<u>Linux desktop operating system (Debian, Fedora, Kicksecure, Whonix, and most others) specific example</u>:

* '''Definition:''' If <code>sudo</code> is configured to allow user <code>user</code> to run commands without a password, the machine can be considered rooted by the user.
* '''In technical terms:''' File <code>/etc/sudoers.d/user-passwordless</code> contains content <code>user ALL=(ALL:ALL) NOPASSWD:ALL</code>.
* '''Implications:''' This means the user will be able to run <code>sudo some-command</code> to execute a command with administrative ("root") rights without a password. The user could even run <code>sudo su</code> to switch to user <code>root</code>.

<u>Qubes specific example</u>: If package <code>qubes-core-agent-passwordless-root</code> gets installed, then the VM has been rooted by the user. The implications are the same as above. On the other hand, if the user opens a [[Root#Qubes_Root_Console|Qubes Root Console]], the VM should not be considered rooted.

<u>Malware specific example</u>: If a web server (such as <code>nginx</code> running under a limited Linux account user <code>nginx</code>) gets compromised, the malware could attempt to root the device (synonym of saying "root the operating system"). This is also often called local privilege escalation (LPE), which refers to exploiting vulnerabilities, misconfigurations, or using other techniques to escalate permissions from a regular user to a higher privilege level, typically the "root" user.

<u>Android specific example</u>: If the user manages to get an Android Root Management Tool such as SuperSU, Magisk, or Superuser by ChainsDD to be functional, then the device is typically considered "rooted by the user". On the other hand, if a compromised or malicious app accomplishes LPE, then the device can be considered "rooted by malware".

<u>Unclear definitions</u>: What if on a Linux desktop distribution, user <code>user</code> can gain root rights after using <code>sudo</code> and entering a password? Typically, for Linux desktop distributions this is not considered "rooted". The word "rooted" is mostly used on mobile operating systems Android and iOS.

<u>Difference in Terminology</u>:

* '''Desktop Linux''': The concept of "rooting" is not usually applied to traditional Linux desktops. Instead, users elevate privileges with <code>sudo</code>, which is considered a normal administrative function. The term "rooted" implies a fundamental change in the system's security model that is not present when using standard privilege escalation like <code>sudo</code>.
* '''Mobile OS (Android/iOS)''': "Rooting" or "jailbreaking" signifies that the device’s default restrictions are bypassed, giving the user continuous and unrestricted access to system files and functions.

<u>Malicious Root Management Tools</u>: Are an Android / iOS specific issue. Some websites say, that for example KingRoot for Android is malware. <ref>
https://ivonblog.com/en-us/posts/kingroot-is-a-malware/
</ref> This issue does not exist for Linux desktop distributions. Tools such as <code>su</code>, <code>sudo</code>, <code>doas</code> are Open Source, Freedom Software and generally not considered malware. The existence of malicious root management tools and other issues (documented on [[Mobile_Phone_Security#Administrative_Rights|Mobile Devices Privacy and Security, Administrative Rights]]) are among reasons why rooting is often discouraged for mobile devices. However, a blanket recommendation to avoid rooting in all cases for all use cases cannot be deduced from that.

<u>Related</u>:

* [[Miscellaneous_Threats_to_User_Freedom#Administrative_Rights|General Threats to User Freedom, Administrative Rights Refusal]]
* [[Verified Boot]]

== sudoless ==
Different people have used the term "sudoless" for very different meanings.

* 2015: [https://gist.github.com/ivandokov/9328c98202b45104fa3e ivandokov/sudoless]: means passwordless <code>sudo</code>. The ability of a specific Linux user account name such as "<code>user</code>" to run <code>sudo</code> without a password.
* 2021: [https://andyyang.co.uk/synology-nas-how-to-run-docker-commands-without-sudo/ How to run Docker commands without sudo on a Synology NAS: A quick guide to enable sudoless docker commands.]
* 2022: [https://forums.kicksecure.com/t/sudoless-kicksecure/139 a Kicksecure user forum post]: used "sudoless" as a synonym for "passwordless".
* 2023: [https://www.techrepublic.com/article/enable-podman-sudoless-container-management/ TechRebuplic: How to enable Podman sudo-less container management]
* 2024: [https://github.com/secureblue/secureblue/releases/tag/v4.2.0 secureblue]: used "sudoless" in context of removal of <code>sudo</code>, <code>su</code> and <code>pkexec</code>. (Related: [[Dev/secureblue|Comparison of secureblue with Kicksecure and Development Notes]], chapter [[Dev/secureblue#sudoless|sudoless]].)

The term "sudoless" can therefore be confusing, should either be avoided or clarified when used.

= See Also =
* [[SysRq|System Recovery using SysRq Key]]
* [[Login spoofing]]
* [[Dev/Strong_Linux_User_Account_Isolation|Strong Linux User Account Isolation]]

= Development =
* {{project_name_short}} code: [https://github.com/{{project_name_short}}/security-misc/pull/22 Restrict access to the root account].
* https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/68
* https://forums.whonix.org/t/should-lesser-adversaries-with-physical-access-be-part-of-the-threat-model-of-whonix-whonix-host-kicksecure/7997

= Attribution =
{{sdebian
|link=https://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#idm1391
|text=Using sudo
}}

= Footnotes =
{{reflist|close=1}}
[[Category:Documentation]]
{{Footer}}