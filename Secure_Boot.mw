{{Header}}
{{#seo:
|description=Complexities and security concerns of Secure Boot in the context of Linux distributions. The challenges posed by Secure Boot's requirement for a single signature on binaries, the reliance on Microsoft's key for booting, and the implications for user trust and security. 
}}
{{intro|
Complexities and security concerns of Secure Boot in the context of Linux distributions. The challenges posed by Secure Boot's requirement for a single signature on binaries, the reliance on Microsoft's key for booting, and the implications for user trust and security. 
}}
{{stub}}
= Bad Design =
Secure Boot allowing only one signature on a binary creates a major mess.

{{quotation
|quote=1) Users wishing to run in a Secure Boot environment will have to trust Microsoft in order to boot official Fedora. The Secure Boot signing format currently allows only one signature on a binary -- so Fedora's shim bootloader can be signed only by the Microsoft-vouched key. If a user removes Microsoft's key, official Fedora will no longer boot, as long as Secure Boot is on.
|context=[https://www.fsf.org/campaigns/secure-boot-vs-restricted-boot/whitepaper-web Free Software Foundation (FSF): Free Software Foundation recommendations for free operating system distributions considering Secure Boot]
}}

Note: Unspecific to Fedora and also applicable to other Linux distributions.

{{quotation
|quote=1) Machines sold as "Ubuntu Certified," preinstalled with Ubuntu, will have an Ubuntu-specific key, generated by Canonical, in their firmware.
}}

But that does not help Ubuntu much because Ubuntu cannot sign its bootloader (shim) with both keys, the Microsoft key and their Ubuntu key. Therefore, quote:

{{quotation
|quote=2) Ubuntu CDs, distributed separately from hardware, will also depend on the presence of Microsoft's key in the machine's firmware to boot, when Secure Boot is active.
}}

And also the security gain is negligible because Microsoft's key also must be installed.

{{quotation
|quote=1) Machines sold as "Ubuntu Certified," preinstalled with Ubuntu, will have an Ubuntu-specific key, generated by Canonical, in their firmware. Additionally, they will be required by the certification guidelines to have the Microsoft key installed.
}}

The decision to either trust Microsoft or Ubuntu is a big one. But in rather rare cases it will make sense for users to trust both keys at the same key (except in dual-boot scenarios).

It is also a bit of security theater.

{{quotation
|quote=the boot loader must not execute any unsigned code in a firmware context, that is, before ExitBootServices is called just before jumping into the kernel.
|context=[https://lists.ubuntu.com/archives/ubuntu-devel/2012-June/035445.html UEFI Secure Boot and Ubuntu - implementation]
}}

Then also nowadays the inital ramdisk used by most (if not all) Linux desktop distributions contains unsigned code.

ExitBootServices

= Microsoft =
Microsoft is dictating policy for the Linux boot process.

{{quotation
|quote=Due to the complexity of the Linux boot process, the number of active releases from different distributions with compatibility challenges, and the support and serviceability timelines of in-market products, a limited exception to the NX signing requirements has been granted. 

This limited exception is granted for shims serving in-market products.  This exception will be reviewed regularly, and once component versions are identified that meet the compatibility requirements, new shim signing requests for products targeting the identified components will no longer be exempt. Additionally, when shim functionality is developed to provide compatibility for older, non-compliant boot components, new shim signings will no longer be exempt.  

Please reach out to: uefisign@microsoft.com with any questions on this policy.
|context=[https://techcommunity.microsoft.com/t5/hardware-dev-center/nx-exception-for-shim-community/ba-p/3976522 NX Exception for SHIM Community]
}}

Related shim ticket linking to the same source [https://github.com/rhboot/shim/issues/615 Is 15.8 being prepared?].

https://techcommunity.microsoft.com/t5/hardware-dev-center/updated-uefi-signing-requirements/ba-p/1062916

https://techcommunity.microsoft.com/t5/windows-hardware-certification/pre-submission-testing-for-uefi-submissions/ba-p/364829

= There is no single one shim =
There is no "THE shim". Each Linux distribution can compile its own. It is not very useful without getting signed with a key approved by Microsoft. To get reviewed, the shim review board is involved.

https://github.com/rhboot/shim-review

= shim HTTP boot =
HTTP boot is part of the UEFI specification.

<code>shim</code> can be started from a UEFI boot entry. <ref>
https://github.com/rhboot/shim/issues/636#issuecomment-1938777413
</ref>

Where is that UEFI boot entry stored? Inside <code>efivars</code> (a (U)EFI variable filesystem).

Where is <code>efivars</code> stored? Inside the <code>NVRAM</code>. What is the <code>NVRAM</code>? Imagine it being similar to a hard drive but not really a separate hard drive. It's a writable storage area on the motherboard, part of the firmware.

<code>shim</code>'s HTTP boot can then fetch and execute another UEFI executable such as bootloader (such as [[grub|GNU GRUB]] or [[Linux]]

{{quotation
|quote=The vulnerability can also be exploited locally by an attacker with enough privileges to manipulate data in the EFI Variables or on the EFI partition. This can be accomplished with a live Linux USB stick. The boot order can then be changed such that a remote and vulnerable shim is loaded on the system. This shim is then used to execute privileged code from the same remote server, all without ever disabling Secure Boot.
|context=[https://eclypsium.com/blog/the-real-shim-shady-how-cve-2023-40547-impacts-most-linux-systems/ The Real Shim Shady: How CVE-2023-40547 Impacts Most Linux Systems]
}}

related:

* shim bug report / feature request: [https://github.com/rhboot/shim/issues/636 remove shim HTTP boot due to security issues] / split shim into <code>shim-trivial</code> and <code>shim-http-boot</code>
* shim documentation pull request [https://github.com/rhboot/shim/pull/638 mention HTTP boot support in readme]

= Opinion =
Secure Boot is a mechanism imposed by Microsoft (Windows) designed to harm its competition, mostly Linux distributions. It's security properties are moot. Theory and practice. At time of writing:

* Secure Boot in theory: Real Open Source, Linux desktop distributions could have a full verified boot chain and even might have it one day. With user-controlled keys. Maybe [https://forums.whonix.org/t/fs-verity-in-linux-5-4/8911/30 measured boot] is more likely to materialize.
* Secure Boot in practice: Just causing user confusion, scaring users, usability issue, way to complicated to use, prevents users from using Linux distributions, causes issues with kernel module installation

= See Also =
* [[Verified Boot]]

= Footnotes=
<references/>
{{Footer}}
[[Category: Development]]