{{Header}}
{{title|title=
ToDo for {{project_name_long}} Wiki Devs
}}
{{#seo:
|description=Website Enhancements Planning
}}
{{devwiki}}
{{intro|
Website Enhancements Planning
}}
= TODO: ADMIN - SOON =

= TODO: ADMIN - DELAYED =
== Small images super resistant cache problem ==

* Dev noticed that especially with small images it's hard to really clear them on their file wiki page after a new version has been uploaded
* Even clear cache minimal from the admin panel does not work. Clear cache cookie is active, nocache setting in the browser dev tools network setting. Still the old file is shown in the preview and the "original file" link, not the new file
* Note: On larger images this issue does not seem to happen so much. The images are mostly updated if browser cache is not active
* Note: The "query trick" was also tried, like https://www.kicksecure.com/wiki/File:Bootloader-pass.png?ab=c, but did not work
* Especially on this page [[:File:Bootloader-pass.png]] it is clearly visible that the new version is different from the version in the preview
* Task for admin: What can we do to either automatically or manually refresh?

== archivebox ==
https://archivebox.io/#quickstart

== illustrative images creation ==
Implementation probably needs discussion.

* Hiding your identity is harder than just hiding your IP.
* You can't be anonymous without being secure.
* your Whonix with Tor versus your IP without Whonix
* route randomization
* Ask yourself - privacy by design / privacy by policy
* freedom / freedom security / security
* why security matters
* why anonymity matters

'''DEV'''
* It was agreed upon with admin that these tasks need a media / posting strategy first
* So this task is delayed until admin has such a strategy

== new thank you donation message ==
1) CORS issues are fixed now? (Patrick attempted to fix these.)

2) explain Patrick how to draft a HTML e-mail with text-only fallback in Thunderbird

3) Possible to have a plaintext fallback if HTML is disabled by the e-mail client?

4) e-mail for

* Kicksecure
* Whonix

5) bug?

This page is in Quirks Mode. Page layout may be impacted. For Standards Mode use “<!DOCTYPE html>”.

https://developer.mozilla.org/docs/Web/HTML/Quirks_Mode_and_Standards_Mode

Valid HTML better / good idea for best e-mail reader compatibility?

'''DEV'''

# How can I check CORS issues?
# In thunderbird multipart email can be accomplished by going to "Options > Sending Format" and choose "Both HTML and Plain Text"
## This Sending Format however only seems to take effect if the mail is truly sent. So saving it as a draft and then "saving as" .eml does work but does not create a multipart email
## So maybe admin should send the email to his own email address and then save the .eml file
## However this eml file needs to be modified for each recipient, so there needs to be more work done
## Maybe another mail software needs to be involved
# The plaintext fallback is exactly what we want to accomplish with multipart
# What is meant with task 4?
# Maybe live discussion is needed

Patrick:

send HTML <code>Content-Type: multipart/alternative; boundary=</code> message

{{CodeSelect|code=
cat filename.txt {{!}} sendmail -i test@test.com
}}

== MultiWiki: delete deleted files ==

'''DEV'''

* I suggest upgrading mw-multi-wiki
* Currently it is the case that files which are deleted are not updated during mw-multi-wiki deploy
* This means that a dev would have to delete the other files manually and keep track somewhere which files to delete later
* This is a problem because sometimes files should not be deleted before everything is finished and admin has approved development. And it also cannot be deleted before because then the wiki which is not updated yet would not function anymore
* So I suggest admin upgrades the mw-multi-wiki script and checks for formerly Category:MultiWiki files that are now deleted and delete them too
* Or maybe find another solution

Patrick:

* How mw-multi-wiki could detect deleted files from Category:MwDeleteMe?
** Currently mw-multi-wiki uses MediaWiki API to look at https://www.kicksecure.com/wiki/Category:MultiWiki
** Once a page is deleted, it vanishes from the Category:MultiWiki page. Therefore mw-multi-wiki "forgets" about its existence.
* '''A)''' mw-multi-wiki could be stateful and "remember" which pages were ever in mw-multi-wiki but that's ugly because then an idempotent, clean script would be dependent on remembering the state in some state file. The state would be difficult to share among developers.
* '''B)''' A Category:MwDeleteMe could be invented. Delete all contents from the page and add that Category. Then mw-multi-wiki could remove it first from slave and eventually form the master wiki. Also non-ideal because not an intuitive process as it requires the developer to remember this because it's not a simple as using as using the wiki's internal deletion feature.
* '''C)''' Deletion log https://www.kicksecure.com/wiki/Special:Log/delete doesn't contain categories.
** Parsing the deleted revision for Category:MultiWiki might be error prone (if a wiki page was MultiWiki in the past but then it was only a comment).

status:

Patrick asked on the MediaWiki mailing list. https://lists.wikimedia.org/hyperkitty/list/mediawiki-l@lists.wikimedia.org/thread/DIREH7YFVQPYHIJFFUXNBE6PVJ6OSMUX/

new idea: diff the categories in the different wikis

report only

== MultiWiki: Think about PHP files ==

* For the workflow it would be good to not only deploy the js and css files to the "slave" wikis, but also the php-scripts for combined and headscript content
* Pro: if there are more than 2 wikis (which are not at the moment) then it's way easier to manage
* Con: At the moment it's not necessary. And we would need to be very careful with who gets the rights

== Stage Server as Master ==

* MultiWiki feature requests:
** The idea is the separate MultiWiki files into "code" (js, css files) and "content" (content pages)
** pull code (CSS, JS, widgets) from Kicksecure stage server
*** How about templates such as [[Template:Header]]?
**** These need to be in a special category to be recognized as code?
* stage server feature request:
** The stage server becomes the master server for code files. That way new scripts can be developed and tested on the stage server without disrupting the normal production use of the public wikis. Once a new feature is ready it can be multiwiki deployed from the stage server (master) to the slave wikis
* For content pages the Kicksecure wiki might still be the master however

== check this stuff ==

* https://developer.chrome.com/docs/devtools/application/back-forward-cache/
** This is a browser dev tools functionality
** Checks if a page stays in cache forwards and backwards
** Dev has tested this on both wikis on hp, about, download, docs and donate - works fine everywhere
** Does probably not need to be documented because Lighthouse does this automatically and gives error messages if not working
** A site note: They explain that cache-control: no-store should be used only for pages that have private information, everything else no-cache
* https://www.mediawiki.org/wiki/Snippets/Load_an_additional_JavaScript_or_stylesheet_file_on_all_pages
** This gives another method to load styles and javascript for all pages
** This is not needed because we already have our own build process and headscript
* https://marketingpipeline.github.io/CSS-Image-Loader/index.html
** Here is the main link https://github.com/MarketingPipeline/CSS-Image-Loader
** This is a topic that Dev research a while ago
** It's basically a hack. That hack might become an HTMl feature in the future, it would make sense. But for now it's using a common browser W3C-non-conformity (i. e. images may not have after or before pseudo elements).
** The author himself states <blockquote>Note: this is just a proof of concept. You should still provide a fallback source for your images using an onerror etc. As iOS / Webkit devices do NOT currently support the CSS attribute ::before needed for the fallback error image.</blockquote>
** Conclusion: Not recommended to use currently.
* https://medium.com/free-code-camp/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c
** In this article some best practices for image are discussed
** We use some of the techniques already (for example for the preloaded hero images
** Dev did see nothing that we would need to implement right now
* https://github.com/kizule/mediawiki-extensions-Kicksecure
** This is just a hello world right now. Not sure what should be accomplished here?
* https://textoptimizer.com/
** Seems like an interesting tool
** Appears to be a "tag cloud from the internet"
** Dev not sure how useful. Can be good for SEO, but needs a lot of work, because those words cannot be just pasted in
** The tool also offers an AI assistent, but it's probably risky to "AI-ify" the whole website just for (questionable) SEO improvements
** Also this tool is free for now which is suspicious. Probably a venture capitalist project with a lot of VC money which will cost a lot in the future
* https://github.com/vozlt/nginx-module-vts
** Seems very interesting

== Server forcing browser cache clear methods ==

'''DEV'''
* As discussed with admin a method for forcing the browser to reload a document by the server is needed - especially for the mobile browsers. They sometimes don't even reload the document, but just the headers and they seem to ignore or misinterpret our cache headers
* Suggestions: Admin could use
** <code>cache-control: no-store</code> : This would be a very aggressive anti cache strategy that prevents any caching. It's maybe too aggressive, but mentioned for completeness
** <code>cache-control: no-cache, must-revalidate</code> : no-cache does not prevent the use of caching, but forces the browser to revalidate with the origin server
** <code>ETag: [versionId]</code> : The Etag header could be used. This is basically a version number header for the document
* Opinion
** We are currently using: <code>cache-control: s-maxage=86400, must-revalidate, max-age=0</code>
** Dev thinks that we are missing the <code>no-cache</code> value. This should be tried first. All the big platforms seem to have it https://fred-gu.medium.com/fix-the-annoying-web-page-caching-issue-permanently-5d16527d0b5a
** ETag also seems like an interesting method. The article above does not mention ETag, but it might be there. But browsers could also ignore ETag
** No-store seems too aggressive and can maybe only be used if the request has the <code>?debug=true</code> query. But on the other hand our developer bypasses are good enough Dev thinks
* For more information
** https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
** https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag
* different per resource:
** https://www.kicksecure.com/mw-autogen/mw-combined-skincss.min.css?css-extension=1&hsversion_from_server_replacement_unixtime=1746506245&hsversion_from_server_replacement_unixtime=1744450225&hsversion_from_server_replacement_unixtime=1744204573&hsversion_from_server_replacement_unixtime=1743067824&hsversion_from_server_replacement_unixtime=1743067824&hsversion_from_server_replacement_unixtime=1742808625&hsversion_from_server_replacement_unixtime=1742808625
** https://www.kicksecure.com
* backend server vs frontend server
* goals: caching users versus debugging developers

== page protection ==
* Would it be possible / sensible to add "Dev only" pages? Anon-user should in general not be able to edit those pages at all for security reasons.
** MediaWiki supports that. For example for [[Template:DonatePageContent]] go to:
*** More -> Protect -> allow only administrators
* All multi wiki and some more pages like payment should be added to this category
** All multi wiki: No. Some are simple content pages (such as [[Template:Open_File]]) which are already sufficiently protected by the flagged revisions wiki extension.
** Some security critical pages may indeed need write protection.
** Please look through security critical pages and protect them. If it is a massive amount, please instead just share a list of  them privately so this can be done via mediawiki-shell API. Link format does not matter.

<pre>
https://www.kicksecure.com/wiki/Dev/website
https://www.kicksecure.com/wiki/Dev/todo
</pre>

or

<pre>
Dev/website
Dev/todo
</pre>

* Could also consider: add category protect and then one day auto protect these via API.

'''DEV'''
* Dev suggests adding the following pages, because they are functional. Following the rationale of admin content pages are not to be extra protected (apart from the automatic flagged revisions). Rule of thumbs
* If a template accepts parameters it's likely to be protected
* Also templates are to be protected which are content but 
** purely functional or
** administrative or
** where it's uper unlikely a normal user could be reasonably assumed to have sensible input for changes.
* Dev would leave it to admin to decide when to protect these pages. Threat level is not high due to flagged revisions. It's just that these pages are super unlikely to "benefit" from anon intervention. So it makes sense to protect them just to save unnecessary work (meaning: looking through anon page edits which should not be edited anyways)
<pre>
Template:Admins
Template:AdvancedUsersOnly
Template:Anchor
Template:Anchor_link
Template:Apt_key_add
Template:Archived
Badtitle
Template:Box
Template:Bugs_Issues_Troubleshooting_mininav
Template:ClearLine
Template:Cli
Template:Clickable_button
Widget:CodeSelect
Template:CodeSelect
Template:Collapsible
MediaWiki:Common.css
MediaWiki:Common.js
Template:Community_Support
Template:Contact_icon_bullet_list
Template:ContentImage
Template:Contribute_mininav
Template:Contributor
Template:Curl_Secure
Template:Curl_Secure_Download
Template:CustomRepo
Template:Default_Passwords
Template:Developers-only
Template:Do_not_continue_on_gpg_verification_errors
Template:Donate_Legal_Disclaimer
Donate/Affiliate_Link
Donate/AUD
Donate/Bank_Wire
Donate/Bitcoin
Donate/Credit_Card
Donate/Crypto
Donate/Ethereum
Donate/EUR
Donate/GBP
Donate/Monero
Donate/PayPal
Donate/Tax-Deductible
Donate/USD
Template:Donation_appeal_download
Template:Donation_mininav
Widget:Donation_Panel
Template:DonorCard
Widget:Download_Button
Template:Download_image_and_signature
Template:DownloadTableUnified
Template:Draft
Widget:EagerImage
Template:ETA
Widget:Expand_or_Collapse_All
Template:Expand_or_Collapse_All
Template:ExtLink
Widget:ExtLink
Template:Flatpak_add_repository_short
Widget:FlyInNotification
Template:FlyInNotification
Widget:Footer
Template:Free
Widget:Free
Widget:Freedom
Template:Get_Signing_Key
Template:GnuPG_file_names
Template:GoogleOff
Template:Gui
Template:Header
Widget:Header
Widget:Headline
Template:Headline
Template:Hide_all_banners
Template:Hsversion
Widget:HtmlComment
Template:Icon
Widget:Icon_Bullet_List
Template:IconSet
Template:Intro
Template:IntroLike
Template:Javascript-looks-better-with-javascript
Widget:LeftRightImageText
Template:LeftRightImageText
Template:License_name
Template:Mbox
Template:Mirror
MediaWiki:Mobile.js
Template:Mod
Template:Name
Template:Name-address
Template:Name-city
Template:Name-company-registration
Template:Name-country
Template:Name-email
Template:Name-short
Template:Name-zip
Template:Navi_project_install_options
Template:Newline
Widget:Non-freedom
Template:Non-freedom
Template:Non-freedom-software
Template:Nowrap
Template:Os
Template:Pay_by_PayPal_Subscription
Widget:Pay_by_PayPal_Subscription
Template:Payments
Template:Policy_mininav
Template:PreBox
Premium_Support
Template:PreventEnhanceHeadlines
Template:Privacy_Policy_Specific
Template:Privacypolicy/Left
Template:Privacypolicy/Right
Template:Project_age_years
Template:Project_License
Template:Qubes_AppArmor
Template:Quotation
Template:Random_number
Template:Release_mininav
Template:Responsive_Thumbnails
Template:Selfsupport_mininav
Template:ShareTooltip
Template:Signing_key_kvm
Template:Signing_key_kvm_signify
Template:Signing_key_main
Template:Signing_key_main_download_command_line
Template:Signing_key_main_signify
MediaWiki:Sitenotice EndOfYear.css
Template:SitenoticeBanner
MediaWiki:Spam-whitelist
Template:Stable
Template:Stable_project_version_based_on_Debian_testing_codename
Template:Stub
</pre>

= TODO DEV =
== VirtualBox wiki page Templates refactoring ==
* please download [[VirtualBox]] (<code>wget https://www.kicksecure.com/wiki/VirtualBox</code>) - useful for later comparison
* the VirtualBox wiki page got a bit overly complex due to historic growth. It's not hard to maintain. It uses [[Template:VirtualBox_Choose_Stable]] which then uses [[Template:Virtualbox_xfce]] and [[Template:Virtualbox_cli]]. These templates then call [[Template:VirtualBox]].
* could we please have a few less layers? Because passing wiki variables gets harder and harder. These layers don't need to be reduced for the sake of it. Only actually useful refactoring that would ease maintenance are the goal. For example, there is no need to merge [[Template:VirtualBox]] and [[Template:VirtualBox 2]].

== content improvements ==
=== add tab controller ===
* [[Core_Dumps#Disabling_Core_Dumps|Disabling Core Dumps]]

=== Browser wiki page ===
* [[Browser]]
* goal: explain why no browser is (will be) installed by default in Kicksecure
* should be understandable by laymen
* please improve content and design

== GitHub Link Template ==
* similar to [[Template:Kicksecure_link]] and [[Template:Kicksecure_wiki]] it would be good to have a [[Template:github_link]]
* example use case: [https://github.com/{{project_name_short}}/ram-wipe wipe RAM at shutdown software solution]
* unspecific to Kicksecure

'''DEV'''
* Done
* Please read documentation [[Dev/mediawiki#Github_link_Template|Github_link Template]] and check out the tests [[Dev/wikitest#Github_link_Template|Github_link Template]]
* Especially check if the quality of life ideas of Dev are satisfactory
* '''NOTE''': This template is based on [[Template:ExtLink]]. This is set to <code>|icons=none</code> because no archive option seemed plausible for Dev

Patrick:

* please add a small github icon
* please port Kicksecure, Whonix to use this new template

=== Whonix USB_Installation - illustrative image ===
* https://www.kicksecure.com/wiki/USB_Installation has a nice illustrative image https://www.kicksecure.com/wiki/File:Download-usb.jpg
* please create the same for https://www.whonix.org/wiki/USB_Installation
* using Whonix style elements

=== Select your platform ===
* search (using Search and Replace extension) for:
{{CodeSelect|code=
Select your platform.
}}
* Kicksecure
* Whonix
* make sure nice icons are being used. good example: https://www.whonix.org/wiki/Template:Restart_Tor

===  Mobile Operating System Comparison - unclickable footnotes ===
* [[Mobile_Operating_System_Comparison#iPhone_and_Android|iPhone and Android]]: footnote 16 not clickable, footnote 20 not clickable, etc.

=== upstream_wiki template improvements ===
* https://www.whonix.org/wiki/Template:Upstream_wiki
** please see how this template is used to get an idea. [[Chromium]] is a good example.
* users "must" really follow that link. Otherwise documentation will be incomplete.
* keep it verbose as is
* make the button nicer (keep onion support)
* add a click animation?
* other stylistic and/or content improvements

=== Whonix Qubes Install wiki content improvement ===
* https://www.whonix.org/wiki/Qubes/Install
* similar to VirtualBox wiki page

=== Whonix KVM wiki content improvement ===
* https://www.whonix.org/wiki/KVM
* similar to VirtualBox wiki page

=== hardware and firmware documentation ===
{{boot_firmware}}

* how to best organize the topics
* content review
* improvement
* contextualization (avoid lost at hello effect)
* [[Open-source_Hardware]] talks a lot about Intel ME but that's not Open Source and maybe should be moved to [[Out-of-band_Management_Technology]], just a short mention instead

=== anchor_link styling ===
* https://www.kicksecure.com/wiki/Template:Anchor_link
* example: https://www.kicksecure.com/wiki/Miscellaneous_Threats_to_User_Freedom#restricted_boot

=== SysRq key ===
* improve [[SysRq]]
* install Template key or similar (copy from wikipedia)
* make it similar to https://en.wikipedia.org/wiki/Magic_SysRq_key#Commands

<pre>
{{key|[[Alt key|Alt]]|[[system request|SysRq]]}}
</pre>

== artistic ==
=== new illustrative images ===
* user-sysmaint-split
** https://www.kicksecure.com/wiki/Dev/user-sysmaint-split
** user / sysmaint (do not mention Live Mode inside the illustrative image)
* https://www.kicksecure.com/wiki/Sysmaint
* https://www.kicksecure.com/wiki/Unrestricted_admin_mode
* https://www.kicksecure.com/wiki/Root
* https://www.kicksecure.com/wiki/Policy_On_Artificial_Intelligence

= WAITING ON =
= REVIEW PLEASE =

== formalize search engine criteria ==

'''DEV'''
* This task was spoken about with Admin.
* task: Check these informal criteria and formalize them  https://forums.whonix.org/t/local-browser-homepage-for-tor-browser-in-whonix/347/101

<blockquote>
We choose to promote search engines by the following criteria and considerations. We are '''NOT sponsored''' by any search engine provider.

'''Criteria for promoted search engines'''. A promoted search engine:
* '''Needs to have little to NO CENSORSHIP''' : Censorship is hard to determine objectively as proof-negative, but proof-positively it can be determined by enough reliable third party research or self-reporting of censorship by the search engine provider so that it is reasonably certain that there is "significant censorship". Significant censorship meaning a significant skewing of of the search results by the search engine provider, hiding the true and most accurate search results in favor of less accurate search results
* '''Needs to provide GOOD RESULTS''' : Even if a search engine is not censoring the search results can still be bad due to them using a bad web crawler bot (bad page analysis algorithm), having too little processing infrastructure so that their bot does not crawl enough websites per month and stay up to date, or they could have a bad indexing algorithm and so on. Good results can also be hard to determine. But heuristically the number of users can indicate a reasonable quality of the results, because this is the main if not only criterion that users use to decide which search engine to use. Also this can be determined by using a new search engine as the main daily driver for a week. If the tester is satisfied with the results the engine is probably sufficient enough.
* '''Needs to be RELIABLE''' : The search engine website needs to be up 99.99% and above. Also the provider / company / association / institution needs to be expecting to exist for the next 5 years and more.
* '''(Minor) Needs to be relatively POLITICALLY AGNOSTIC''' : Only few search engines might communicate a strong political bias and agitation. But this is especially true for pages which host "meta search engines" (self-hosted multi provider search engine clients) like searXNG as a "side project". Our projects are very politically agnostic to be inclusive and not alienate anyone. Our mission focus is on security / privacy. This prohibits an association and especially a promotion of "politically strongly biased" projects.

'''Non-criteria for promoted search engines'''. We do NOT consider:
* '''Not considered: Privacy by policy / ownership / location / hosted by which data center''' : These are not considered, because even projects like Debian and Tor Project use AWS, Fastly, CDNs and more. Also most search engine privacy claims can be summed up by "trust me", as some parts of the critical infrastructure are always hidden from the public, so this is where the trust comes in.
* '''Not considered: Non-javascript support''': This isn’t considered, because it's impractical. Almost everything in the web requires Javascript. So concentrating on niche search engines with no-JS support would limit our options drastically.
</blockquote>

== add wiki transparency to local browser pages ==

'''DEV'''
* This task was spoken about with Admin.
* Admin please confirm and put up to Todo
* This link needs to be added to local browser pages https://www.kicksecure.com/wiki/Transparency
* Dev suggests doing a CSS tooltip - similar to the codeselect tooltip - which contains HTML content: "We are NOT sponsored by any search engine. Read (link: our transparency report)"

== book alike style backwards and forwards navigation ==
* for example, see https://www.debian.org/doc/manuals/securing-debian-manual/ has a nice "book alike" style experience with virtual "book pages"
** there is a <code>forward</code> <code>-></code> button
** after clicking it, there is also a <code>backward</code> <code><-</code> button
* TODO: Kicksecure, Whonix:
** Possible to introduce such buttons for our wikis?
** https://www.mediawiki.org/wiki/Extension:PageAfterAndBefore might have done that but has been deprecated.
** How to keep the content easily manageable? Issues such as:
*** New pages might be introduced somewhere in the middle of the "book" at some point.
*** A page might be removed (since it gets merged with another page).
*** In conclusion, the content will remain quite dynamic over time.
* ideas:
** page with higher numbers
*** page 1 would actually no get number 1. Instead it would get number 100. Therefore, it would be easy to wretch pages in between.
*** page 50 would actually no get number 50. Instead it would get number 500. Therefore, it would be easy to wretch pages in between.
*** The generator would order pages as per 100, 200, 250, 260, 300, 400, etc.
* features:
** previous and next page title - good idea to show or best omitted for clarity?
*** ← Introduction
*** Getting Started →
* implementation:
** could this be implemented using mediawiki templates? Do these support simple math?
** lua?
** custom extension?
* design:
** Should result in static, cacheable HTML, not always re-calculated. (This will probably be easy, automatic. Probably no special code required.)
** mobile friendly
'''DEV'''
* After analysis Dev suggests this solution
** We need a widget where the magic happens and a optionally template for convenience
** The template could just be called with e. g.<code><nowiki>{{WikiBookIndex}}</nowiki></code>. But the template would only call the widget, so we could also just use <code><nowiki>{{#widget:WikiBookIndex}}</nowiki></code>
** In the widget
*** we will define an array with all pages (url page names) in order of this giant index
*** The widget will find out, on which page it is, it will then determine which page is the predecessor (backward/back) and which one is the successor (forward/next) and will render the "wiki book index navigation" only the two buttons "backward" and "forward" with the two links
* Dev also suggests
** Creating a page where the whole index is shown as a list. The page would be like "Read our whole wiki like a book". The index on the page would also be rendered with a simple command <code><nowiki>{{#widget:WikiBookIndex|mode=fullIndex}}</nowiki></code>
** For the convencience of the user Dev would also add a third button "Go to index" in the "wiki book index navigation". Clicking this the user will be sent to the whole index page suggested above
** Admin should also think about giving the user the option to opt-out of the "book index", because it could be annoying. This would be by javascript, so only available for JS users. But if book navigation is done tastefully and minimally maybe opt-out is not needed
** From a design standpoint the navigation should not be so separated like at debian.
*** You can do this at debian, because the whole layout is very stable and predictable on each page.
*** On our wikis this is often not the case. So separating the buttons could not only lead to confusion but also make the page layouts more complicated
*** For us Dev recommends having 3 buttons close together backward/index/forward, or maybe with icons to make it more clear <br><code>{{Icon|fa-solid fa-caret-left}} {{Icon|fa-solid fa-list}} {{Icon|fa-solid fa-caret-right}}</code>

== Upgrade of editoraddneweditbuttons ==

'''DEV'''
* Dev found a small bug in editoraddneweditbuttons, or more precisely the new solution did not yet place the text cursor right before the end tag as the previous solution did
* This was an inconvenience which Dev corrected (just took half an hour)
* Now it's possible again to for example click one of our buttons and be directly between the tags. So it's easy to click the button and start typing if you hadn't marked text before. This is very useful when writing new documentation

== copying and pasting from mediawiki to discourse forums ==
Example text with link [https://www.example.com example.com] test text.

* When selecting this sentence with mouse, copying it and pasting it into
** Kicksecure discourse forums: Looks kinda ok. Maybe improvement is possible?
** Whonix discourse forums or any third-party forum: Looks bad because Whonix forums CSP blocks images from third-party server.
* todo: discuss solutions, if any are possible

'''DEV'''
* On Kicksecure forum it's probably no problem. We add a style that images in posts have a little margin left and right. Then it won't look cluttered
* On Whonix forum and ref blocking forums it's difficult
** If we're looking for a solution just for Admin, Dev recommends using Ctrl+Shift+V. This will only insert the plain text and no images
*** Patrick: This is good. Please document on [[Forum Best Practices]].
** If we're looking for a global solution that's difficult
*** Dev thought about that images could be stored as base64 that this would have to be done on the source wiki and that's generally not a good way for us to handle images
**** Patrick: baset64 would bloat the forum post and look unclean.
*** Apart from that the forum could maybe be extended if there is an extension / plugin that can pull down the images from the source so the forum stores them locally
**** Patrick: Plugin would probably be complex and maintenance intensive. Therefore given the low priority of this, best avoided.
*** Or forum could use another extension to insert text plain like Dev described above for Ctrl+Shift+V (but automatically)
**** Patrick: Same as above.

'''DEV'''
* Done
* Dev documented [[Forum_Best_Practices#Insert_unformatted_plain_to_avoid_rich_text_images|Insert unformatted plain to avoid rich text images]]
* Dev did not add CSS for the Kicksecure forum because inserted images already look ok, images in posts seem to be seldomly used, and Admin did not request CSS improvement

== browser choice ==
* please review [[Dev/browser-choice]] (excluding past comments)
* primarily the new UI mockups
'''DEV'''
* Browser mockups look good
* Page 1
** Question: There are "links to wiki" implicated. <code><nowiki>[wiki]</nowiki></code>. How can the user open these if there is no browser installed yet? - Or is this assuming a live USB where everything is already installed?
** Why "Select the application to install or remove" the "or remove" part? Can this browser choice tool be started at any time in the usage life cycle of Kicksecure, not just at installation point?
** The paragraph "This tool is provided solely for convenience ..." is very good. 
* Page 2
** Maybe the tool could indicated somewhere how the browser is currently installed? - Like either "Firefox is not installed" or "Firefox is installed as Firefox Stable from Flathub"
** The confirmation screen: The "apt-get update..." part, why is it in <code><nowiki><...></nowiki></code>? - Can be confusing
* Page 3 good
* Page 4 good

== Kicksecure homepage - search engines comment ==
* please have a look and opinion:
** https://searchengine.party/
** https://searx.space/
'''DEV'''
* Discussion Dev Admin was held, to summarize:
* searxng is a fork aof searx. Both are "meta search engines", you install them on a local or web server and when the user enters a search request then customized search engines are requested for search results
* Endorsing searxng would mean either endorse a third party web hosted version, because the developers don't have their own official installation, which is risky. Or provide our own web hosted installation which is a lot of work with probably little reward
* https://searchengine.party/ is just a research site in search engines in general. Some specific searXNG web installations are also researched, but they are third party as mentioned above
** For example https://searx.tiekoetter.com/ - which seems to be a German one person company which you can seen just visiting the main domain https://tiekoetter.com/
* https://searx.space/ on the other hand is a listing and evaluation website for some known searXNG third party installations
Patrick
* New comments in Kicksecure forums. Please read.
* TODO: Discuss.
'''DEV'''
* For reference link to forum https://forums.kicksecure.com/t/add-searxng-and-startpage-buttons-to-kicksecure-welcome-page/992/3
* Suggestions from forum and Dev opinion:
* Linuxer
** Add startpage button
** Elephant image too light for night time
* arraybolt3 brings up all the valid points against third party SearXNG instances that Dev already mentioned
** most important comment about that <blockquote>If an individual was very well-known in the open-source or privacy and security communities, and was able to sustainably run the search engine on their own, it would probably be fine, but otherwise, I’d steer clear there.</blockquote>
** He is more supportive of (trustable) company hosted searxng instances
** He has also some critical concerns about Startpage which are worth a read, e. g. <blockquote>Just because they “block 3rd parties from accessing your personal data to target you”, doesn’t mean they can’t use your personal data to target you themselves.</blockquote>
** In summary his opinion: (1) Disroot’s (trustable company) SearXNG yes (2) searchengine.party yes (3) Startpage no
* Dev's opinion
*# About the wish for a darker elephan picture: this could be just a personal opinion by poster, other's might think differently
*#* But we could add a JS function to switch to dark after a certain time. But Admin would probably like to avoid JS on this page
*#* We could also offer a "dark mode button" on this page via purely CSS. Takes maybe an hour
*#* Apart from that great feedback and praise from that person for Kicksecure resources
*# About Startpage: Linuxer likes it, arraybolt3 seems to be against it and raises some good points. To decide that deeper research into Startpage would be needed
*# About Disroot SearXNG
*#* Dev doesn't know anything about them. Deeper research would be needed.
*#* But also: The main page seems very political, maybe even extremist (at least in their presentation), revolutionary even if you go by their chosen name <blockquote>Dis`root´: 1. To tear up the roots of, or by the roots; hence, to tear from a foundation; to uproot.</blockquote> and image in the homepage https://disroot.org/en
*#* So on first glance Dev would definitely advice AGAINST disroot, because their visual presentation implicates politics and strong political opinions
*#* This is not a vote against Disroot, just a vote against their "unfavorably strongly political seeming" presentation
*# About searchengine.party: Dev would also advise against it. Simply for the reasons that
*#* They seem to have no specific order, so the search engines up top seem to be ENDORSED which means that the user might think that 3 third party SearXNG instances are among the TOP 4 search engines
*#* There is also not "global score" where a search engine gets a "weighted score" based on all the individual criteria. It would be good to have such a score for general reference
*#* The page is not "sortable". It would be very good, or even needed, to have tables sortable by each criteria (and even better: also the weighted total score discussed above) and also by their alphabetical names, maybe founding date and other stuff
*#* '''In summary''': This page is probably more "harmful" than useful to the "casual user". After visiting this page they might be more confused than before. IF ANYTHING they might leave the page thinking that a personal individual instance of a meta search engine (Tiekötter's SearXNG) is the best search engine in the whole world
*#* '''EDIT'''
*#** Dev now realized that there IS  a column sorting feature on this page, which is GOOD and changes the point from before, BUT: This feature is not indicated, so most user might not find it
*#** Especially when you click on the column headlines instead of the expected behavior (sorting) you will be redirected to an explanation for this column AND sorting will be done (off screen)
*#** If you just want sorting you have to click (1) into the column header but (2) NOT on the link text. This is bad usability
*#** Dev thinks: We should not yet support searchengine.party, because all points in summary still stand, because the critical sorting feature is very hidden. '''We could send a pull request''' and offer to improve this page if it's on GIT like arraybolt3 suggested. This might be 2-3 hours of work. If they accept then we can upgrade usability and then this page is useful for the casual user. And then we can ensorse it

== Kicksecure homepage style improvements ==
* https://github.com/Kicksecure/kicksecure-welcome-page
* please consider feedback on style: https://forums.kicksecure.com/t/add-searxng-and-startpage-buttons-to-kicksecure-welcome-page/992/2

'''DEV'''
* Done
* A darker style was applied for better visibility of navigation elements
* The shadows are slightly darker but also slightly blue to match kicksecure logo and sky/water in the image

== edit images ==

'''DEV'''
* Done
* But see "small images problem" task in review regarding bootloader images

=== Kicksecure Hero Image ===
* https://www.kicksecure.com/wiki/File:Kicksecure-image-hero-image.jpeg
** currently, wrong: <code>Sofware</code>
** should be: <code>Software</code>

=== edit image - Bootloader-pass.png ===
* https://www.kicksecure.com/wiki/File:Bootloader-pass.png
* modify second line only
* modify second line <code>username</code> to <code>user</code>
* (only once black out (redact, overwrite with black color) "<code>name</code>")

=== edit image - Grub_bootloader_password.jpg ===
* https://www.kicksecure.com/wiki/File:Grub_bootloader_password.jpg
* change <code>root</code> to <code>user</code>

= Footnotes =
{{reflist|close=1}}
[[Category:Development]]
{{Footer}}