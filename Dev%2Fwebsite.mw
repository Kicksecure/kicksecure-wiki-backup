{{Header}}
{{title|title=
ToDo for {{project_name_long}} Wiki Devs
}}
{{#seo:
|description=Website Enhancements Planning
}}
{{devwiki}}
{{intro|
Website Enhancements Planning
}}
= TODO: ADMIN - SOON =
https://mediawiki.org/wiki/Extension:SaneCase

= TODO: ADMIN - DELAYED =
== archivebox ==
https://archivebox.io/#quickstart

== illustrative images creation ==
Implementation probably needs discussion.

* Hiding your identity is harder than just hiding your IP.
* You can't be anonymous without being secure.
* your Whonix with Tor versus your IP without Whonix
* route randomization
* Ask yourself - privacy by design / privacy by policy
* freedom / freedom security / security
* why security matters
* why anonymity matters

'''DEV'''
* It was agreed upon with admin that these tasks need a media / posting strategy first
* So this task is delayed until admin has such a strategy

== CSS hide some unused mediawiki footer items ==
pagespeed reporting:

Links are not crawlable

<pre>
footer#footer > ul#footer-places > li#footer-places-privacy > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-about > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-disclaimers > a
<a href="">
</pre>

The is the HTML which is most likely auto generated by mediawiki on every wiki pages's HTML:

<pre>
<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> </li>
	<li id="footer-info-copyright">By using this website, you acknowledge you have read, understood, and agree to be bound by these these agreements:</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href=""></a></li>
	<li id="footer-places-about"><a href=""></a></li>
	<li id="footer-places-disclaimers"><a href=""></a></li>
	<li id="footer-places-Terms_of_Service"><a href="/wiki/Terms_of_Service">Terms of Service</a></li>
	<li id="footer-places-Privacy_Policy"><a href="/wiki/Privacy_Policy">Privacy Policy</a></li>
	<li id="footer-places-Cookie_Policy"><a href="/wiki/Cookie_Policy">Cookie Policy</a></li>
	<li id="footer-places-E-Sign_Consent"><a href="/wiki/E-Sign_Consent">E-Sign Consent</a></li>
	<li id="footer-places-DMCA"><a href="/wiki/DMCA">DMCA</a></li>
	<li id="footer-places-Imprint"><a href="/wiki/Imprint">Imprint</a></li>
	<li id="footer-places-darkmode"><a text="Dark mode" href="#" class="ext-darkmode-link nwwmw-ui-icon mw-ui-icon-before mw-ui-icon-darkmode" title="darkmode-link-tooltip" icon="bright">Dark mode</a></li>
</ul>
</pre>

To fix, please try adding to our CSS where appropriate:

{{CodeSelect|code=
#footer-places-privacy { display: none; }
#footer-places-about { display: none; }
#footer-places-disclaimers { display: none; }
}}

'''DEV'''
* Done
* Added to Mediawiki:Footer.css on Kicksecure and Whonix

Patrick:

Try the literal example CodeSelect box from above? Maybe works better than the combined CSS syntax?

'''DEV'''
* As discussed Admin will think of a solution, maybe write a bug report for Pagespeed

== Check Useragreement ==

Please check Useragreement on Kicksecure and Whonix. Widgets have been restored. But the "Yes" Widget seemed to be broken a while ago

== new thank you donation message ==
1) CORS issues are fixed now? (Patrick attempted to fix these.)

2) explain Patrick how to draft a HTML e-mail with text-only fallback in Thunderbird

3) Possible to have a plaintext fallback if HTML is disabled by the e-mail client?

4) e-mail for

* Kicksecure
* Whonix

5) bug?

This page is in Quirks Mode. Page layout may be impacted. For Standards Mode use “<!DOCTYPE html>”.

https://developer.mozilla.org/docs/Web/HTML/Quirks_Mode_and_Standards_Mode

Valid HTML better / good idea for best e-mail reader compatibility?

'''DEV'''

# How can I check CORS issues?
# In thunderbird multipart email can be accomplished by going to "Options > Sending Format" and choose "Both HTML and Plain Text"
## This Sending Format however only seems to take effect if the mail is truly sent. So saving it as a draft and then "saving as" .eml does work but does not create a multipart email
## So maybe admin should send the email to his own email address and then save the .eml file
## However this eml file needs to be modified for each recipient, so there needs to be more work done
## Maybe another mail software needs to be involved
# The plaintext fallback is exactly what we want to accomplish with multipart
# What is meant with task 4?
# Maybe live discussion is needed

Patrick:

send HTML <code>Content-Type: multipart/alternative; boundary=</code> message

{{CodeSelect|code=
cat filename.txt {{!}} sendmail -i test@test.com
}}

== mediawiki-extensions-Purge ==
todo: discuss

What does https://github.com/AlPha5130/mediawiki-extensions-Purge/blob/master/resources/ext.purge.js (15 lines only) do?

Probably would have little effect for our wiki because of our custom skin? Does this functionality seem useful?

'''DEV'''
* The development of this extension seems pretty interesting
* The new extension (from pseudonym dev) is not much different from the original and seems to fix a faulty behavior of the original extension
* Both versions consist of 2 parts: ext.purge.js and Hooks.php
** In Hooks.php in every page (without our skin) there is a link added to call the purge page (which is not part of the extension but of mediawiki itself)
** This is just a convenience shortcut, but useful - even for us. Because if a dev is already on the edit page then our purge via super menu is not available. Removing this extension however would not be a terrible loss but a small convenience downgrade
** In ext.purge.js the convenience is even more improved for Javascript users only. Because then the link does not open the purge-page but is stopped and instead the purge action is instantly performed without going to the purge page
* Both versions are not perfect
** The original version fails to prevent the link to be augmented by Javascript. This might be due to it being loaded to early or other factors
** The newer version fixes this behavior but also prevents nojs users to use this button at all. It will be there but non-functional
* Suggestion (in order of preferability from Dev's perspective)
*# However because it would be mainly for our convenience I suggest use the newer version
*# If not then use the older version
*# If not then write our own fork which would be the perfect solution
*# Another option would be to just add our own purge button via a simple Javascript file on pages that don't have the skin. That would also be a ONLY-JS solution but it would be a bit quicker than the "perfect fork" solution
*# If not then don't use at all, because we have instant access to purge via our skin

Patrick:

* Do we even need the purge button still?
** Only for template changes?
** Otherwise cache invalidation is stable nowadays?
* Weird anyhow that non-admins can clear cache.
* MediaWiki's solution prevents crawlers from accidentally pressing that button.
* noJS support not required.
** JS-only solution good enough.
* Could we make it login-only or admin only?

== Upgrade mw-multi-wiki - delete deleted files ==

'''DEV'''

* I suggest upgrading mw-multi-wiki
* Currently it is the case that files which are deleted are not updated during mw-multi-wiki deploy
* This means that a dev would have to delete the other files manually and keep track somewhere which files to delete later
* This is a problem because sometimes files should not be deleted before everything is finished and admin has approved development. And it also cannot be deleted before because then the wiki which is not updated yet would not function anymore
* So I suggest admin upgrades the mw-multi-wiki script and checks for formerly Category:MultiWiki files that are now deleted and delete them too
* Or maybe find another solution

Patrick:

* How mw-multi-wiki could detect deleted files from Category:MwDeleteMe?
** Currently mw-multi-wiki uses MediaWiki API to look at https://www.kicksecure.com/wiki/Category:MultiWiki
** Once a page is deleted, it vanishes from the Category:MultiWiki page. Therefore mw-multi-wiki "forgets" about its existence.
* '''A)''' mw-multi-wiki could be stateful and "remember" which pages were ever in mw-multi-wiki but that's ugly because then an idempotent, clean script would be dependent on remembering the state in some state file. The state would be difficult to share among developers.
* '''B)''' A Category:MwDeleteMe could be invented. Delete all contents from the page and add that Category. Then mw-multi-wiki could remove it first from slave and eventually form the master wiki. Also non-ideal because not an intuitive process as it requires the developer to remember this because it's not a simple as using as using the wiki's internal deletion feature.
* '''C)''' Deletion log https://www.kicksecure.com/wiki/Special:Log/delete doesn't contain categories.
** Parsing the deleted revision for Category:MultiWiki might be error prone (if a wiki page was MultiWiki in the past but then it was only a comment).

status:

Patrick asked on the MediaWiki mailing list. https://lists.wikimedia.org/hyperkitty/list/mediawiki-l@lists.wikimedia.org/thread/DIREH7YFVQPYHIJFFUXNBE6PVJ6OSMUX/

new idea: diff the categories in the different wikis

report only

== misc ==
* github sponsors credit card?

* https://www.debugbear.com
* https://www.speedcurve.com/
* https://developer.chrome.com/docs/devtools/application/back-forward-cache/
* https://www.mediawiki.org/wiki/Snippets/Load_an_additional_JavaScript_or_stylesheet_file_on_all_pages
* https://marketingpipeline.github.io/CSS-Image-Loader/index.html
* https://medium.com/free-code-camp/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c
* https://github.com/fogleman/primitive
* https://github.com/kizule/mediawiki-extensions-Kicksecure
* https://textoptimizer.com/
* https://github.com/vozlt/nginx-module-vts

== MultiWiki: Think about PHP files ==

* For the workflow it would be good to not only deploy the js and css files to the "slave" wikis, but also the php-scripts for combined and headscript content
* Pro: if there are more than 2 wikis (which are not at the moment) then it's way easier to manage
* Con: At the moment it's not necessary. And we would need to be very careful with who gets the rights

== Stage Server as Master ==

* MultiWiki feature requests:
** The idea is the separate MultiWiki files into "code" (js, css files) and "content" (content pages)
** pull code (CSS, JS, widgets) from Kicksecure stage server
*** How about templates such as [[Template:Header]]?
**** These need to be in a special category to be recognized as code?
* stage server feature request:
** The stage server becomes the master server for code files. That way new scripts can be developed and tested on the stage server without disrupting the normal production use of the public wikis. Once a new feature is ready it can be multiwiki deployed from the stage server (master) to the slave wikis
* For content pages the Kicksecure wiki might still be the master however

= TODO DEV =

== Content ==
=== Strong_Linux_User_Account_Isolation (large content topic) ===
* https://www.kicksecure.com/wiki/Dev/Strong_Linux_User_Account_Isolation
* https://www.kicksecure.com/wiki/Root
* https://www.kicksecure.com/wiki/Dev/boot_modes
* https://www.kicksecure.com/wiki/Default_Passwords

tasks:

* Read.
* Ask what this is unclear.
* Add context where needed.
* Avoid "lost at hello" effect.
* Restructure where needed.
* goal: completely document Linux account user names, purposes and non-purposes, sudo myths

=== Troubleshooting ===
https://www.whonix.org/wiki/Troubleshooting

* Complete content review.
* Perhaps all should be part of the checklist? No separate wiki chapters.
* Probably not much point to separate out "Advanced Connectivity Troubleshooting Steps" in a different chapter.
* Perhaps https://www.whonix.org/wiki/Tor#Connectivity_Troubleshooting should be moved to Troubleshooting?
* Keep compatibility links when moving content.

= WAITING ON =
= REVIEW PLEASE =

== integrate into Documentation page (just linking) ==
wiki/Documentation

* https://www.kicksecure.com/wiki/User
* https://www.kicksecure.com/wiki/Login
* https://www.kicksecure.com/wiki/Timezone
* https://www.whonix.org/wiki/Timezone
* https://www.kicksecure.com/wiki/Advanced_Users

for:

* Kicksecure,
* Whonix - use already existing template kicksecure_wiki

'''DEV'''
* DONE
* It was added in Essential and Advanced Security Guide on both wikis
* Also whonix template kicksecure_wiki was changed
** target=_blank was set (so that users are aware they changed wikis)
** archive=none was set, because our wiki internal links are usually not used with archive
** Dev suggests improving template by not using 2 logos (kicksecure and arrow), but a simple kicksecure logo with an arrow combined

== bugs, support, support status mininav ==
More mininav for the following:

* Which ones are useful to have in a mininav? Perhaps split support and the support statuses? (community support, unsupported, declined)

<div class="mininav">
* [[Documentation]]
* [[FAQ]]
* [[Support]]
* [[Please Use Search Engines And See Documentation First]]
* [[Reporting Bugs]]
* [[Advanced Documentation]]
* [[Community Support]]
* [[Unsupported]]
* [[Declined]]
</div>

'''DEV'''
* Suggests the following structure
* Current Doc navi template
** [[Documentation]] - no change
** [[FAQ]] - no change
** [[Support]] - no change
** [[Advanced Documentation]] - no change
** [[Reporting Bugs]] - Add this because this is users wanting to improve the software
** [[Self_Support_First_Policy]] - This is a one way link to the other "nav template", reason read below in next navi template
* New "Help yourselves" navi template
** [[Self_Support_First_Policy]] 
** MERGE page: Dev suggests merging [[Please Use Search Engines And See Documentation First]] into [[Self_Support_First_Policy]]. "Please use..." page can have a redirect to "Self Support ..." page. 
** [[Community Support]]
** [[Declined]]
** [[Unsupported]]

== VPN ==
* https://forums.whonix.org/t/new-vulnerabilities-in-vpns/20260
* https://citizenlab.ca/2024/07/vulnerabilities-in-vpns-paper-presented-at-the-privacy-enhancing-technologies-symposium-2024/

todo:

* integrate here:
* https://www.whonix.org/wiki/Whonix_versus_VPNs (summary)
* https://www.whonix.org/wiki/Tunnels/Introduction (shorter summary + link)

'''DEV'''
* DONE (as logged in user)

== Please_Use_Search_Engines_And_See_Documentation_First ==
[[Please_Use_Search_Engines_And_See_Documentation_First]]

* Add more practical tips.
** Add a few search engines (same as on local browser homepages).
** Also mention AI (chatgpt, claude, perplexity) for search but add words of caution.
*** Tell user to not post screenshots of what perplexity is saying. Follow the information to the source.

'''DEV'''
* DONE as anon user
* Introduction was introduced
* New chapter "Specific suggestions"
* New title image

== Server forcing browser cache clear methods ==

'''DEV'''
* As discussed with admin a method for forcing the browser to reload a document by the server is needed - especially for the mobile browsers. They sometimes don't even reload the document, but just the headers and they seem to ignore or misinterpret our cache headers
* Suggestions: Admin could use
** <code>cache-control: no-store</code> : This would be a very aggressive anti cache strategy that prevents any caching. It's maybe too aggressive, but mentioned for completeness
** <code>cache-control: no-cache, must-revalidate</code> : no-cache does not prevent the use of caching, but forces the browser to revalidate with the origin server
** <code>ETag: [versionId]</code> : The Etag header could be used. This is basically a version number header for the document
* Opinion
** We are currently using: <code>cache-control: s-maxage=86400, must-revalidate, max-age=0</code>
** Dev thinks that we are missing the <code>no-cache</code> value. This should be tried first. All the big platforms seem to have it https://fred-gu.medium.com/fix-the-annoying-web-page-caching-issue-permanently-5d16527d0b5a
** ETag also seems like an interesting method. The article above does not mention ETag, but it might be there. But browsers could also ignore ETag
** No-store seems too aggressive and can maybe only be used if the request has the <code>?debug=true</code> query. But on the other hand our developer bypasses are good enough Dev thinks
* For more information
** https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
** https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag

= Footnotes =
{{reflist|close=1}}
[[Category:Development]]
{{Footer}}