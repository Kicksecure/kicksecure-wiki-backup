{{Header}}
{{title|title=
ToDo for {{project_name_long}} Wiki Devs
}}
{{#seo:
|description=Website Enhancements Planning
}}
{{devwiki}}
{{intro|
Website Enhancements Planning
}}
= TODO: ADMIN - SOON =

== Install EmbedVideo (fork) extension ==

* Please install https://www.mediawiki.org/wiki/Extension:EmbedVideo_(fork)
* It is necessary for embedding the ISO boot menu explainer video

= TODO: ADMIN - DELAYED =
== archivebox ==
https://archivebox.io/#quickstart

== bump cache version version ==
bump https://www.kicksecure.com/wiki/Template:Hsversion when running cacheclear-minimal on the server

== illustrative images creation ==
Implementation probably needs discussion.

* Hiding your identity is harder than just hiding your IP.
* You can't be anonymous without being secure.
* your Whonix with Tor versus your IP without Whonix
* route randomization
* Ask yourself - privacy by design / privacy by policy
* freedom / freedom security / security
* why security matters
* why anonymity matters

'''DEV'''
* It was agreed upon with admin that these tasks need a media / posting strategy first
* So this task is delayed until admin has such a strategy

== CSS hide some unused mediawiki footer items ==
pagespeed reporting:

Links are not crawlable

<pre>
footer#footer > ul#footer-places > li#footer-places-privacy > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-about > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-disclaimers > a
<a href="">
</pre>

The is the HTML which is most likely auto generated by mediawiki on every wiki pages's HTML:

<pre>
<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> </li>
	<li id="footer-info-copyright">By using this website, you acknowledge you have read, understood, and agree to be bound by these these agreements:</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href=""></a></li>
	<li id="footer-places-about"><a href=""></a></li>
	<li id="footer-places-disclaimers"><a href=""></a></li>
	<li id="footer-places-Terms_of_Service"><a href="/wiki/Terms_of_Service">Terms of Service</a></li>
	<li id="footer-places-Privacy_Policy"><a href="/wiki/Privacy_Policy">Privacy Policy</a></li>
	<li id="footer-places-Cookie_Policy"><a href="/wiki/Cookie_Policy">Cookie Policy</a></li>
	<li id="footer-places-E-Sign_Consent"><a href="/wiki/E-Sign_Consent">E-Sign Consent</a></li>
	<li id="footer-places-DMCA"><a href="/wiki/DMCA">DMCA</a></li>
	<li id="footer-places-Imprint"><a href="/wiki/Imprint">Imprint</a></li>
	<li id="footer-places-darkmode"><a text="Dark mode" href="#" class="ext-darkmode-link nwwmw-ui-icon mw-ui-icon-before mw-ui-icon-darkmode" title="darkmode-link-tooltip" icon="bright">Dark mode</a></li>
</ul>
</pre>

To fix, please try adding to our CSS where appropriate:

{{CodeSelect|code=
#footer-places-privacy { display: none; }
#footer-places-about { display: none; }
#footer-places-disclaimers { display: none; }
}}

'''DEV'''
* Done
* Added to Mediawiki:Footer.css on Kicksecure and Whonix

Patrick:

Try the literal example CodeSelect box from above? Maybe works better than the combined CSS syntax?

'''DEV'''
* As discussed Admin will think of a solution, maybe write a bug report for Pagespeed

== Check Useragreement ==

Please check Useragreement on Kicksecure and Whonix. Widgets have been restored. But the "Yes" Widget seemed to be broken a while ago

== new thank you donation message ==
1) CORS issues are fixed now? (Patrick attempted to fix these.)

2) explain Patrick how to draft a HTML e-mail with text-only fallback in Thunderbird

3) Possible to have a plaintext fallback if HTML is disabled by the e-mail client?

4) e-mail for

* Kicksecure
* Whonix

5) bug?

This page is in Quirks Mode. Page layout may be impacted. For Standards Mode use “<!DOCTYPE html>”.

https://developer.mozilla.org/docs/Web/HTML/Quirks_Mode_and_Standards_Mode

Valid HTML better / good idea for best e-mail reader compatibility?

'''DEV'''

# How can I check CORS issues?
# In thunderbird multipart email can be accomplished by going to "Options > Sending Format" and choose "Both HTML and Plain Text"
## This Sending Format however only seems to take effect if the mail is truly sent. So saving it as a draft and then "saving as" .eml does work but does not create a multipart email
## So maybe admin should send the email to his own email address and then save the .eml file
## However this eml file needs to be modified for each recipient, so there needs to be more work done
## Maybe another mail software needs to be involved
# The plaintext fallback is exactly what we want to accomplish with multipart
# What is meant with task 4?
# Maybe live discussion is needed

Patrick:

send HTML <code>Content-Type: multipart/alternative; boundary=</code> message

{{CodeSelect|code=
cat filename.txt {{!}} sendmail -i test@test.com
}}

== mediawiki-extensions-Purge ==
todo: discuss

What does https://github.com/AlPha5130/mediawiki-extensions-Purge/blob/master/resources/ext.purge.js (15 lines only) do?

Probably would have little effect for our wiki because of our custom skin? Does this functionality seem useful?

'''DEV'''
* The development of this extension seems pretty interesting
* The new extension (from pseudonym dev) is not much different from the original and seems to fix a faulty behavior of the original extension
* Both versions consist of 2 parts: ext.purge.js and Hooks.php
** In Hooks.php in every page (without our skin) there is a link added to call the purge page (which is not part of the extension but of mediawiki itself)
** This is just a convenience shortcut, but useful - even for us. Because if a dev is already on the edit page then our purge via super menu is not available. Removing this extension however would not be a terrible loss but a small convenience downgrade
** In ext.purge.js the convenience is even more improved for Javascript users only. Because then the link does not open the purge-page but is stopped and instead the purge action is instantly performed without going to the purge page
* Both versions are not perfect
** The original version fails to prevent the link to be augmented by Javascript. This might be due to it being loaded to early or other factors
** The newer version fixes this behavior but also prevents nojs users to use this button at all. It will be there but non-functional
* Suggestion (in order of preferability from Dev's perspective)
*# However because it would be mainly for our convenience I suggest use the newer version
*# If not then use the older version
*# If not then write our own fork which would be the perfect solution
*# Another option would be to just add our own purge button via a simple Javascript file on pages that don't have the skin. That would also be a ONLY-JS solution but it would be a bit quicker than the "perfect fork" solution
*# If not then don't use at all, because we have instant access to purge via our skin

Patrick:

* Do we even need the purge button still?
** Only for template changes?
** Otherwise cache invalidation is stable nowadays?
* Weird anyhow that non-admins can clear cache.
* MediaWiki's solution prevents crawlers from accidentally pressing that button.
* noJS support not required.
** JS-only solution good enough.
* Could we make it login-only or admin only?

== Upgrade mw-multi-wiki - delete deleted files ==

'''DEV'''

* I suggest upgrading mw-multi-wiki
* Currently it is the case that files which are deleted are not updated during mw-multi-wiki deploy
* This means that a dev would have to delete the other files manually and keep track somewhere which files to delete later
* This is a problem because sometimes files should not be deleted before everything is finished and admin has approved development. And it also cannot be deleted before because then the wiki which is not updated yet would not function anymore
* So I suggest admin upgrades the mw-multi-wiki script and checks for formerly Category:MultiWiki files that are now deleted and delete them too
* Or maybe find another solution

Patrick:

* How mw-multi-wiki could detect deleted files from Category:MwDeleteMe?
** Currently mw-multi-wiki uses MediaWiki API to look at https://www.kicksecure.com/wiki/Category:MultiWiki
** Once a page is deleted, it vanishes from the Category:MultiWiki page. Therefore mw-multi-wiki "forgets" about its existence.
* '''A)''' mw-multi-wiki could be stateful and "remember" which pages were ever in mw-multi-wiki but that's ugly because then an idempotent, clean script would be dependent on remembering the state in some state file. The state would be difficult to share among developers.
* '''B)''' A Category:MwDeleteMe could be invented. Delete all contents from the page and add that Category. Then mw-multi-wiki could remove it first from slave and eventually form the master wiki. Also non-ideal because not an intuitive process as it requires the developer to remember this because it's not a simple as using as using the wiki's internal deletion feature.
* '''C)''' Deletion log https://www.kicksecure.com/wiki/Special:Log/delete doesn't contain categories.
** Parsing the deleted revision for Category:MultiWiki might be error prone (if a wiki page was MultiWiki in the past but then it was only a comment).

status:

Patrick asked on the MediaWiki mailing list. https://lists.wikimedia.org/hyperkitty/list/mediawiki-l@lists.wikimedia.org/thread/DIREH7YFVQPYHIJFFUXNBE6PVJ6OSMUX/

new idea: diff the categories in the different wikis

report only

== misc ==
* github sponsors credit card?

* https://www.debugbear.com
* https://www.speedcurve.com/
* https://developer.chrome.com/docs/devtools/application/back-forward-cache/
* https://www.mediawiki.org/wiki/Snippets/Load_an_additional_JavaScript_or_stylesheet_file_on_all_pages
* https://marketingpipeline.github.io/CSS-Image-Loader/index.html
* https://medium.com/free-code-camp/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c
* https://github.com/fogleman/primitive
* https://github.com/kizule/mediawiki-extensions-Kicksecure
* https://textoptimizer.com/
* https://github.com/vozlt/nginx-module-vts

== MultiWiki: Think about PHP files ==

* For the workflow it would be good to not only deploy the js and css files to the "slave" wikis, but also the php-scripts for combined and headscript content
* Pro: if there are more than 2 wikis (which are not at the moment) then it's way easier to manage
* Con: At the moment it's not necessary. And we would need to be very careful with who gets the rights

== Stage Server as Master ==

* MultiWiki feature requests:
** The idea is the separate MultiWiki files into "code" (js, css files) and "content" (content pages)
** pull code (CSS, JS, widgets) from Kicksecure stage server
*** How about templates such as [[Template:Header]]?
**** These need to be in a special category to be recognized as code?
* stage server feature request:
** The stage server becomes the master server for code files. That way new scripts can be developed and tested on the stage server without disrupting the normal production use of the public wikis. Once a new feature is ready it can be multiwiki deployed from the stage server (master) to the slave wikis
* For content pages the Kicksecure wiki might still be the master however

= TODO DEV =
== EditorAutoBackup large file save problem ==

'''DEV'''
* Dev can now reproduce the bug again
* Shall bug be fixed?

Patrick:

* Yes.

== wiki saving bug #2 ==
* go to [[Dev/website#EditorAutoBackup_quota_full_exception|EditorAutoBackup quota full exception]] -> click save -> nothing happens (bug) -> click save again -> successfully saved
* EditorAutoBackup button remains broken on these websites
* maybe browser cache bug?
* bug was introduced by the same time EditorAutoBackup was introduced
* happening on long pages such as Dev/website / [[ISO]]
* not happening on short pages such as [[TestpageForFlyInNotification]]
* does not happen when disabling our JS / dontload=js using debug helper (https://www.kicksecure.com/w/index.php?title=Dev%2Fwebsite&stable=0&dontload=js)

'''DEV'''
* Admin reports that bug seems to be fixed
* We agreed to set it on "Done" for the time being
* However if this bug ever occurs again, the editor / admin / dev is advised to go into the Chrome Console > Application > LocalStorage and copy the whole value of the "wikiEditorAutoBackup" key entry into a text file. This text file should be given to Dev then

Patrick:

* bug is back on [[Dev/todo]]
* first click, bug:

<pre>
Uncaught TypeError: Cannot read properties of undefined (reading '1')
    at saveEntry (mw-combined-wikijs.js:1312:80)
    at getContentAndSave (mw-combined-wikijs.js:1368:7)
    at eventContentUpdate (mw-combined-wikijs.js:1371:35)
    at HTMLFormElement.<anonymous> (mw-combined-wikijs.js:1481:7)
    at HTMLFormElement.dispatch (jquery.js:5145:27)
    at elemData.handle (jquery.js:4949:28)
saveEntry @ mw-combined-wikijs.js:1312
getContentAndSave @ mw-combined-wikijs.js:1368
eventContentUpdate @ mw-combined-wikijs.js:1371
(anonymous) @ mw-combined-wikijs.js:1481
dispatch @ jquery.js:5145
elemData.handle @ jquery.js:4949
</pre>

* second click, ok.

== Slow loading Javascript problem ==

'''DEV'''
* On pages where a lot of Javascript is used the page can slow down significantly
* A report was done for [[Dev/mediawiki]] by using DebugViaUrlModal. Total time about 6000ms
** '''enhanceHeadlines +2300ms / 38%'''
*** 259 elements
*** content: Sharetooltip is added to each one
*** possibly time consuming: Sharetooltip creates Dom and adds event handler
** '''scrollAutoWrapper +1500ms / 25%'''
*** 79 elements
*** Custom scrollbar is being added
*** possibly time consuming: (1) scrollbar library (2) ObserverEventHandler (needed if an element is hidden at the start)
** '''CodeSelect +1000ms / 17%'''
*** 1420 elements
*** possibly time consuming: (1) code Highlighting (as with CodeMirror) (2) scrollbar library (3) events for functionality
** '''header +300ms / 5%'''
*** Not very important. Most scripts add 50 ms - 200 ms to loading
* Web workers were researched to use parallel processes - dead end, because web workers cannot access the main thread / Dom / events
* setTimeout method was explored + fixes were added
** setTimeout works, however the main problem is that the browser has no "time to breathe". Added setTimeout between the scripts helps, but for the main identified problem scripts, setTimeout might need to be applied to the individual "enrichment" of "time costly" elements

Patrick:

* use more setTimeout for the individual "enrichment"
* please document

'''DEV'''
* DONE
* Changes were done with great success. Report: On our [[Dev/website]]
** Dev tests before showed a blocked loading time of 6000ms to 6500ms
** Dev tests now show a <u>semi</u>-blocked loading time of 900ms to 1000ms
** Semi-blocking means that even in those 1000ms the user can interact with the page nicely because the browser "breathes" between the different scripts loads (work of yesterday) which was not the case before
** There are not many drawbacks. The page gradually enriches, but as we focussed on preventing content shift before the content does not shift but only changes slightly in appearance
** The only drawback is that currently the timing check is not very meaningful anymore, because it cannot account for the scripts anymore that are individually async
* Documentation here: [[Dev/mediawiki#Wiki_Load_Cascade_:_HTML.2C_CSS.2C_Javascript|Wiki Load Cascade : HTML, CSS, Javascript]]
* '''Todo Admin'''
** Check if everything is satisfactory
** Should something be done about the now inaccurate timing checks? - Dev could come up with something prob. in about 1-2 hours
* Patrick:
** yes, please.

== numbers 1 2 3 and A B C Templates ==
[[ISO]], [[VirtualBox]] etc. now look a lot better with the small colorful numbers such as 1, 2, 3. It's desirable to use this wiki wide.

TODO:

* create a simple to use template such as <code><nowiki>{{number|color=cyan|number=1}}</nowiki></code>.
* similar for letters A B C
* port existing uses to the new template
* if worthwhile. maybe even simpler <code><nowiki>{{1}} {{2}} {{3}}</nowiki></code>, because '''1.''', '''2.''', '''3.''' is used a lot in the wiki. 
** or perhaps this could be done using CSS styling?

== Content ==
=== Whonix Windows Installer page revision ===
https://www.whonix.org/wiki/Windows_Quick_Start_Testers_Only_Version

similar to above

=== Install Software ===
* https://www.kicksecure.com/wiki/Install_Software
* improve introduction so it can be used to answer https://www.reddit.com/r/Whonix/comments/1fr29g2/jdownloader_on_whonix/
** don't answer directly about jdownloader
** a generic answer on how to install software on Kicksecure, that is "same as on Debian" because Kicksecure is [[About#Based_on_Debian|Based on Debian]]

=== integrate into Documentation page (just linking) ===
wiki/Documentation

* https://www.kicksecure.com/wiki/User
* https://www.kicksecure.com/wiki/Login
* https://www.kicksecure.com/wiki/Timezone
* https://www.whonix.org/wiki/Timezone
* https://www.kicksecure.com/wiki/Advanced_Users

for:

* Kicksecure,
* Whonix

=== bugs, support, support status mininav ===
More mininav for the following:

* Which ones are useful to have in a mininav? Perhaps split support and the support statuses? (community support, unsupported, declined)

<div class="mininav">
* [[Documentation]]
* [[FAQ]]
* [[Support]]
* [[Please Use Search Engines And See Documentation First]]
* [[Reporting Bugs]]
* [[Advanced Documentation]]
* [[Community Support]]
* [[Unsupported]]
* [[Declined]]
</div>

=== Kicksecure About ===
https://www.kicksecure.com/wiki/About

* start using left/right images similar as on https://www.whonix.org/wiki/About

=== Please_Use_Search_Engines_And_See_Documentation_First ===
[[Please_Use_Search_Engines_And_See_Documentation_First]]

* Add more practical tips.
** Add a few search engines (same as on local browser homepages).
** Also mention AI (chatgpt, claude, perplexity) for search but add words of caution.
*** Tell user to not post screenshots of what perplexity is saying. Follow the information to the source.

=== VPN ===
* https://forums.whonix.org/t/new-vulnerabilities-in-vpns/20260
* https://citizenlab.ca/2024/07/vulnerabilities-in-vpns-paper-presented-at-the-privacy-enhancing-technologies-symposium-2024/

todo:

* integrate here:
* https://www.whonix.org/wiki/Whonix_versus_VPNs (summary)
* https://www.whonix.org/wiki/Tunnels/Introduction (shorter summary + link)

=== Strong_Linux_User_Account_Isolation (large content topic) ===
* https://www.kicksecure.com/wiki/Dev/Strong_Linux_User_Account_Isolation
* https://www.kicksecure.com/wiki/Root
* https://www.kicksecure.com/wiki/Dev/boot_modes
* https://www.kicksecure.com/wiki/Default_Passwords

tasks:

* Read.
* Ask what this is unclear.
* Add context where needed.
* Avoid "lost at hello" effect.
* Restructure where needed.
* goal: completely document Linux account user names, purposes and non-purposes, sudo myths

=== Troubleshooting ===
https://www.whonix.org/wiki/Troubleshooting

* Complete content review.
* Perhaps all should be part of the checklist? No separate wiki chapters.
* Probably not much point to separate out "Advanced Connectivity Troubleshooting Steps" in a different chapter.
* Perhaps https://www.whonix.org/wiki/Tor#Connectivity_Troubleshooting should be moved to Troubleshooting?
* Keep compatibility links when moving content.

= WAITING ON =
= REVIEW PLEASE =

== ISO documentation - compare with Tails ==
* https://tails.net/install/linux/index.en.html
* check if Tails has instructions or visual elements that we also should add
** exclusive of off-topic and excessive warnings
** exclusive of JavaScript based file verification

'''DEV'''
* DONE
* DIFFERENT: Details hardware requirements → Not needed: because very few / no requirements that not everybody has
* DIFFERENT: Tails is not magic warning → Not needed: maybe irritates / scares the user
* DIFFERENT: Protecting / Limitations / Reducings risks → not needed: Seems to be a chapter of pros and cons of Tails. If someone goes on the INSTALL PAGE they are already sure they want the product. Don't waste their time by trying to convince them AGAIN or worse don't discourage them so they will decide against downloading
* DIFFERENT: EFF / Front Line defenders guides → not needed: To encounter new installation instructions can be overwhelming already. So it's adviced to not give more information or require more actions or reading from the user than is absolutely necessary
* SIMILAR: The installation steps are very nice and simple
* DIFFERENT: They use / recycle the "your steps" icons again in the installation process. → Maybe needed: This can be a nice touch if it's done tastefully. Might be a slight improvement
* DIFFERENT: Verify via Javascript. → Maybe needed: This seems to be a nice, handy feature. However this depends on what admin knows about the users. If it's really only highly skilled users who use the verification then the longer process might not only be tolerable but might be what they PREFER. But if it's also casual users who would like to do a verification then Javascript based verification might be a good idea
* DIFFERENT: Well Done banner → Maybe needed: This banner is a good indicator for a completion. But it is too dynamic and big. What we have with the "Done" points is equally as good or better. BUT we could add a bigger DONE icon at the end of the large chapters
* DIFFERENT: Their boot menu explainer video → Needed: Our video needs to be integrated as soon as possible. Ours is shorter and better.
* DIFFERENT: Troubleshoot Tails not starting → Maybe needed: But not so specific, rather a "Troubleshooting" chapter, where we think of all the problems a user could have or list problems that users had in the past and give answers
* DIFFERENT: Test your Wifi chapter → Maybe needed: This is a content question. Dev does not know if there is value in having this content chapter for Kicksecure

== ISO BIOS Video - #2 ==
TODO:

* A video similar to https://tails.net/install/inc/videos/boot-menu-key.webm
* Not a full ISO installation video.
* Animation only.
* Not a real test of the real Kicksecure ISO.

'''DEV'''
* DONE
* Video was created (see chat)
* It is kept really short and to the point
* Dev tested rendering to GIF - 6,1M B - vs rendering to mp4 - 0,56 MB
* So Dev suggests using mp4 and if auto-looping is desired do it via Javascript

Patrick:

* see private feedback

'''DEV'''
* Revision DONE
* Waiting for further revisions
* Revision was done + new step was added + audio track was added
* speaker text draft was created
* Video was checked with exiftool
* Video was uploaded
* '''Admin please see [[Dev/website#Install_EmbedVideo_.28fork.29_extension|Install EmbedVideo (fork) extension]] to allow video embedding with player'''

== EditorAutoBackup quota full exception ==

'''DEV'''
* Dev suggests securing EditorAutoBackup against "full quota" exception
* The exception occurred when Dev editing large files (like [[ISO]] and [[Progress_Reports]]) back to back. This way the localStorage quota (of 5 MB) filled rather quickly. This leads to a JS exception
* Dev suggests handling the exception and also introducing a content filtering for large files when old entries are deleted so that large files have priority to be deleted. And Dev suggests having not only a "number of dates" limiter, but also a "max sizes" limiter for large files (meaning a normal file can have 25 entries for example, but a large file only 10 and the saves will be therefore only every 30 seconds or so
* '''TODO ADMIN''': Decide how do we proceed?

Patrick:

* Yes. Fewer revisions stored for large pages. Super sized pages need to be well handled. Maybe even disabling saving for super sized (could be logs or something).

'''DEV'''
* DONE
* New features: byte oversize management, general exception handling, icon color change + notification
* Documentation [[Dev/mediawiki#EditorAutoBackup|EditorAutoBackup]]
* Cleanup
* Note: In the testing process with super large files Dev had heavy performance issues. Dev thought that could be caused by EditorAutoBackup. It was deactivated but problems still persisted. Dev finally figured out that '''CodeMirror''' (our optional syntax highlighting extension) cannot handle large files very well. Normally this is not a problem. Dev just wanted to let admin know

Patrick:

* Please look for a CodeMirror upstream bug and if none found, please draft one.

'''DEV'''
* I have found this post on the extension discussions https://www.mediawiki.org/w/index.php?title=Topic:Xy5wdyzedunlq944&topic_showPostId=xy6h0qknewsvivzr#flow-post-xy6h0qknewsvivzr
* TLDR: The extension has this problem, just like vanilla CodeMirror, just like many tools with syntax highlighting
** The problem is that basically the whole doc needs to be analysed and then a completely new document is created with a lot of HTML structure to "syntax highlight". This is processing intensive and takes time
** Replier also says that the module would basically have to be rewritten to eg just render parts of the page on demand.
* So basically this is not a bug and could just be feature request by us. But give that it would be a huge undertaking for them I see the chances very slim

== Wiki_Enhancements twitter image broken ==
https://www.kicksecure.com/wiki/Wiki_Enhancements

Twitter preview image is broken. Probably because it is not 2:1?

TODO: please fix, try with a twitter image debugger (check they're functional on other pages first to see if these are generally functional)

'''DEV'''
* ADMIN ACTION NEEDED
* Problem could not be fixed yet
* Research journey
** Dev assumed it was an image issues.
*** Dev used one of his own private servers (not known) and uploaded a copy of the Wiki_Enhancements source code to this and also the preview image
*** This did also not work
*** Dev tried different image sizes which did also not work.
*** Dev tried the same experiment and downloaded the apple.com page and the preview image. This worked
*** Dev tried to change the apple image with a recropped version of our image. This worked
*** Dev tried again the Wiki_Enhancements source code on his private server with the recropped image. This worked.
*** Different websites were tested
**** https://www.wikipedia.org/ works, it is a png, 1:1
**** https://www.mediawiki.org/wiki/Wikimedia_Hackathon_2024 works, it is a jpg, 16:9 or 1.78:1
**** https://www.mediawiki.org does not work, it is a jpg, 1:1 - it works on the tester pages though
**** https://www.apple.com/ works, it is a png, 1.905:1
**** https://tails.net/ does not work, because it is prevented by robots.txt
**** https://www.torproject.org/ works. It is a png with 2:1
**** https://www.qubes-os.org/ works. It is a png with 1.905:1
**** Also many Kicksecure pages were tested. Homepage, Download, About, Donate worked on Twitter, but did NOT work with the testers. Dev thinks that these pages are also "broken" but twitter does not reload them so the old preview is used and is therefore save. But that's just an assumption
** Dev concludes
*** About the image I'm not sure completely, but the following is highly likely
**** Images are accepted in multiple file types: jpg, png, also webp (not links about but other tests)
**** Images can have a range of sizes. Common are 1:1 to 2:1 which all do work
**** The pages do not use twitter:image but mostly og:image meta tag which seems to be accepted by twitter
**** Use absolute links: Twitter seems to need absolute urls. This was tested on the private server. Relative adresses like <code>/w/images/...</code> do not work. Also absolute image starting with the domain like <code>https://www.kicksecure.com/w/images/2/2c/Wiki-upgrade-social-preview.png?version=26ed5bd8ec8fbabdfec28f40d8463039</code>. This is automatically handled by our SEO extension, but it's worth mentioning in case we ever change it
**** The https://www.mediawiki.org not working is strange. Maybe also a legacy issue. But also the MediaWiki page (but NOT Wikipedia) have a weird meta tag policy where they have the og:image meta tag 3 times in then og:image:height and og:image:width each time again - the exact same meta tag. This seems supposed to be for the crawler for different sizes to choose, but as it is the same tag the crawler probably just takes the last instance of each tag. And maybe the 640x360 image is accepted from Hackathon 2024, but not the 640x640 image from the main page. So it can be assumed that wide images have different rules than square images. Wikipedia with its square image in contrast has a very large square png (>2000x2000)
**** It also seems Twitter updates at the earliest every 10 minutes
**** For later documentation, Dev suggests for Twitter image testing
****# Test every new url that should go on twitter with these two pages. They sometimes have a refresh delay of max 1 minute each after you change something on the url. https://threadcreator.com/tools/twitter-card-validator and https://renderform.io/tools/twitter-card-preview-tool/#
****# Test also on this page. Although it's deprecated (only for SEEING previews) by twitter it's still valuable for the log and maybe to trigger twitter to url (seems to sometimes work) https://cards-dev.x.com/validator
****# The most reliable but also slowest test is on https://x.com/compose/post There you just post the URL and wait a couple of seconds for the preview to show up. If it takes to long reload the page and try again. If it still does not work the check cards-dev validator above again. Maybe there's an important info like <code>ERROR: Fetching the page failed because it's denied by robots.txt.</code> which it was for tails.net
*** Now to our page: The last idea Dev has is that our CORS headers and other headers are the problem
**** cross-origin-resource-policy: same-site restricts the resource to be used only by the same site. Twitter's crawler might not be considered part of the "same site". Alternative: cross-origin-resource-policy: cross-origin
**** The header cross-origin-opener-policy: same-origin could potentially restrict cross-origin data sharing. Alternative cross-origin-opener-policy: unsafe-none
**** The header x-frame-options: SAMEORIGIN prevents the image from being embedded in frames from other origins
**** Also there's a content-type mismatch: The header content-type: image/webp indicates that the image is being served as a WebP file, but the file extension in the URL suggests it might be a JPEG (.jpg). 
*** '''TODO Admin'''
**** Please try experimenting / fixing these 3 policies
**** After that Dev would like to get this task back up to document the whole process in our Dev documentation

Patrick:

* CORS is unlikely the issue because: Works on different wiki pages but all wiki pages have the same CORS headers. CORS is a a recommendation set by the server. The design idea is to protect a user's browser from a compromised server. The client software (browser or bot) needs to adhere to CORS. See also [[Website_Tests#Content_Security_Policy_.28CSP.29|Content Security Policy (CSP)]].

= Footnotes =
{{reflist|close=1}}
[[Category:Development]]
{{Footer}}