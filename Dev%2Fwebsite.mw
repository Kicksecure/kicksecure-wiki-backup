{{Header}}
{{title|title=
ToDo for {{project_name_long}} Wiki Devs
}}
{{#seo:
|description=Website Enhancements Planning
}}
{{devwiki}}
{{intro|
Website Enhancements Planning
}}
= TODO: ADMIN - SOON =

= TODO: ADMIN - DELAYED =
== archivebox ==
https://archivebox.io/#quickstart

== bump cache version version ==
bump https://www.kicksecure.com/wiki/Template:Hsversion when running cacheclear-minimal on the server

== illustrative images creation ==
Implementation probably needs discussion.

* Hiding your identity is harder than just hiding your IP.
* You can't be anonymous without being secure.
* your Whonix with Tor versus your IP without Whonix
* route randomization
* Ask yourself - privacy by design / privacy by policy
* freedom / freedom security / security
* why security matters
* why anonymity matters

'''DEV'''
* It was agreed upon with admin that these tasks need a media / posting strategy first
* So this task is delayed until admin has such a strategy

== CSS hide some unused mediawiki footer items ==
pagespeed reporting:

Links are not crawlable

<pre>
footer#footer > ul#footer-places > li#footer-places-privacy > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-about > a
<a href="">
footer#footer > ul#footer-places > li#footer-places-disclaimers > a
<a href="">
</pre>

The is the HTML which is most likely auto generated by mediawiki on every wiki pages's HTML:

<pre>
<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> </li>
	<li id="footer-info-copyright">By using this website, you acknowledge you have read, understood, and agree to be bound by these these agreements:</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href=""></a></li>
	<li id="footer-places-about"><a href=""></a></li>
	<li id="footer-places-disclaimers"><a href=""></a></li>
	<li id="footer-places-Terms_of_Service"><a href="/wiki/Terms_of_Service">Terms of Service</a></li>
	<li id="footer-places-Privacy_Policy"><a href="/wiki/Privacy_Policy">Privacy Policy</a></li>
	<li id="footer-places-Cookie_Policy"><a href="/wiki/Cookie_Policy">Cookie Policy</a></li>
	<li id="footer-places-E-Sign_Consent"><a href="/wiki/E-Sign_Consent">E-Sign Consent</a></li>
	<li id="footer-places-DMCA"><a href="/wiki/DMCA">DMCA</a></li>
	<li id="footer-places-Imprint"><a href="/wiki/Imprint">Imprint</a></li>
	<li id="footer-places-darkmode"><a text="Dark mode" href="#" class="ext-darkmode-link nwwmw-ui-icon mw-ui-icon-before mw-ui-icon-darkmode" title="darkmode-link-tooltip" icon="bright">Dark mode</a></li>
</ul>
</pre>

To fix, please try adding to our CSS where appropriate:

{{CodeSelect|code=
#footer-places-privacy { display: none; }
#footer-places-about { display: none; }
#footer-places-disclaimers { display: none; }
}}

'''DEV'''
* Done
* Added to Mediawiki:Footer.css on Kicksecure and Whonix

Patrick:

Try the literal example CodeSelect box from above? Maybe works better than the combined CSS syntax?

'''DEV'''
* As discussed Admin will think of a solution, maybe write a bug report for Pagespeed

== Check Useragreement ==

Please check Useragreement on Kicksecure and Whonix. Widgets have been restored. But the "Yes" Widget seemed to be broken a while ago

== new thank you donation message ==
1) CORS issues are fixed now? (Patrick attempted to fix these.)

2) explain Patrick how to draft a HTML e-mail with text-only fallback in Thunderbird

3) Possible to have a plaintext fallback if HTML is disabled by the e-mail client?

4) e-mail for

* Kicksecure
* Whonix

5) bug?

This page is in Quirks Mode. Page layout may be impacted. For Standards Mode use “<!DOCTYPE html>”.

https://developer.mozilla.org/docs/Web/HTML/Quirks_Mode_and_Standards_Mode

Valid HTML better / good idea for best e-mail reader compatibility?

'''DEV'''

# How can I check CORS issues?
# In thunderbird multipart email can be accomplished by going to "Options > Sending Format" and choose "Both HTML and Plain Text"
## This Sending Format however only seems to take effect if the mail is truly sent. So saving it as a draft and then "saving as" .eml does work but does not create a multipart email
## So maybe admin should send the email to his own email address and then save the .eml file
## However this eml file needs to be modified for each recipient, so there needs to be more work done
## Maybe another mail software needs to be involved
# The plaintext fallback is exactly what we want to accomplish with multipart
# What is meant with task 4?
# Maybe live discussion is needed

Patrick:

send HTML <code>Content-Type: multipart/alternative; boundary=</code> message

{{CodeSelect|code=
cat filename.txt {{!}} sendmail -i test@test.com
}}

== mediawiki-extensions-Purge ==
todo: discuss

What does https://github.com/AlPha5130/mediawiki-extensions-Purge/blob/master/resources/ext.purge.js (15 lines only) do?

Probably would have little effect for our wiki because of our custom skin? Does this functionality seem useful?

'''DEV'''
* The development of this extension seems pretty interesting
* The new extension (from pseudonym dev) is not much different from the original and seems to fix a faulty behavior of the original extension
* Both versions consist of 2 parts: ext.purge.js and Hooks.php
** In Hooks.php in every page (without our skin) there is a link added to call the purge page (which is not part of the extension but of mediawiki itself)
** This is just a convenience shortcut, but useful - even for us. Because if a dev is already on the edit page then our purge via super menu is not available. Removing this extension however would not be a terrible loss but a small convenience downgrade
** In ext.purge.js the convenience is even more improved for Javascript users only. Because then the link does not open the purge-page but is stopped and instead the purge action is instantly performed without going to the purge page
* Both versions are not perfect
** The original version fails to prevent the link to be augmented by Javascript. This might be due to it being loaded to early or other factors
** The newer version fixes this behavior but also prevents nojs users to use this button at all. It will be there but non-functional
* Suggestion (in order of preferability from Dev's perspective)
*# However because it would be mainly for our convenience I suggest use the newer version
*# If not then use the older version
*# If not then write our own fork which would be the perfect solution
*# Another option would be to just add our own purge button via a simple Javascript file on pages that don't have the skin. That would also be a ONLY-JS solution but it would be a bit quicker than the "perfect fork" solution
*# If not then don't use at all, because we have instant access to purge via our skin

Patrick:

* Do we even need the purge button still?
** Only for template changes?
** Otherwise cache invalidation is stable nowadays?
* Weird anyhow that non-admins can clear cache.
* MediaWiki's solution prevents crawlers from accidentally pressing that button.
* noJS support not required.
** JS-only solution good enough.
* Could we make it login-only or admin only?

== Upgrade mw-multi-wiki - delete deleted files ==

'''DEV'''

* I suggest upgrading mw-multi-wiki
* Currently it is the case that files which are deleted are not updated during mw-multi-wiki deploy
* This means that a dev would have to delete the other files manually and keep track somewhere which files to delete later
* This is a problem because sometimes files should not be deleted before everything is finished and admin has approved development. And it also cannot be deleted before because then the wiki which is not updated yet would not function anymore
* So I suggest admin upgrades the mw-multi-wiki script and checks for formerly Category:MultiWiki files that are now deleted and delete them too
* Or maybe find another solution

Patrick:

* How mw-multi-wiki could detect deleted files from Category:MwDeleteMe?
** Currently mw-multi-wiki uses MediaWiki API to look at https://www.kicksecure.com/wiki/Category:MultiWiki
** Once a page is deleted, it vanishes from the Category:MultiWiki page. Therefore mw-multi-wiki "forgets" about its existence.
* '''A)''' mw-multi-wiki could be stateful and "remember" which pages were ever in mw-multi-wiki but that's ugly because then an idempotent, clean script would be dependent on remembering the state in some state file. The state would be difficult to share among developers.
* '''B)''' A Category:MwDeleteMe could be invented. Delete all contents from the page and add that Category. Then mw-multi-wiki could remove it first from slave and eventually form the master wiki. Also non-ideal because not an intuitive process as it requires the developer to remember this because it's not a simple as using as using the wiki's internal deletion feature.
* '''C)''' Deletion log https://www.kicksecure.com/wiki/Special:Log/delete doesn't contain categories.
** Parsing the deleted revision for Category:MultiWiki might be error prone (if a wiki page was MultiWiki in the past but then it was only a comment).

status:

Patrick asked on the MediaWiki mailing list. https://lists.wikimedia.org/hyperkitty/list/mediawiki-l@lists.wikimedia.org/thread/DIREH7YFVQPYHIJFFUXNBE6PVJ6OSMUX/

new idea: diff the categories in the different wikis

report only

== misc ==
* github sponsors credit card?

* https://www.debugbear.com
* https://www.speedcurve.com/
* https://developer.chrome.com/docs/devtools/application/back-forward-cache/
* https://www.mediawiki.org/wiki/Snippets/Load_an_additional_JavaScript_or_stylesheet_file_on_all_pages
* https://marketingpipeline.github.io/CSS-Image-Loader/index.html
* https://medium.com/free-code-camp/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c
* https://github.com/fogleman/primitive
* https://github.com/kizule/mediawiki-extensions-Kicksecure
* https://textoptimizer.com/
* https://github.com/vozlt/nginx-module-vts

== MultiWiki: Think about PHP files ==

* For the workflow it would be good to not only deploy the js and css files to the "slave" wikis, but also the php-scripts for combined and headscript content
* Pro: if there are more than 2 wikis (which are not at the moment) then it's way easier to manage
* Con: At the moment it's not necessary. And we would need to be very careful with who gets the rights

== Stage Server as Master ==

* MultiWiki feature requests:
** The idea is the separate MultiWiki files into "code" (js, css files) and "content" (content pages)
** pull code (CSS, JS, widgets) from Kicksecure stage server
*** How about templates such as [[Template:Header]]?
**** These need to be in a special category to be recognized as code?
* stage server feature request:
** The stage server becomes the master server for code files. That way new scripts can be developed and tested on the stage server without disrupting the normal production use of the public wikis. Once a new feature is ready it can be multiwiki deployed from the stage server (master) to the slave wikis
* For content pages the Kicksecure wiki might still be the master however

= TODO DEV =
== embedvideo ==

* The poster option for embedvideo does not seem to work. Dev checked multiple times and could not find problems on his part. So this might be a problem of the extension. (Poster has been removed currently to not have legacy data problems later). Also the video player does not allow fullscreen which might be a problem of our wiki headers.
** Patrick: No action. Fullscreen is not important for the small and short video on 1 page only.
* Dev could also replace "play video" with a proper play Icon and remove the "local file" tag
** Patrick: Please do.

== Pay as you go ==

<pre>
Donate once | Donate monthly | other ways to donate
</pre>

example:

* https://reactos.org/download/
* https://web.archive.org/web/20240611151318/https://reactos.org/download/
* https://www.gpg4win.org/get-gpg4win.html

design:

* no sneakiness
* still a simple download
* todo discuss: popup free? like gnupg is doing? maybe hard as their download page is simpler.
* noJS users: download
* JS users: donation popup
* Not using: "No, thanks. Let's proceed with the download!"
** instead use a bigger, central: "Download Now (FREE!)" button
* configurable text.
* initial text:

<pre>
Help Kicksecure to reach Stable by a recurring donation
</pre>

TODO:

<pre>
PayPal is one of the most popular ways to donate some bucks to ReactOS. Please help us to hire new devs and enhance our servers just by dropping a couple of coffees each month.
</pre>

similar to PayPal widget or re-use PayPal widget

<pre>
0 | 5 | 15
</pre>

* Same content as on the [[Donate]] wiki page?
* Add all major payment icon symbols (Bitcoin, Ethereum, Monero, PayPal, Bank, Visa, MasterCard) and link them to the [[Donate]] wiki page.

old considerations:

* pro
** elementary.io does it
* contra
** Confusing for users which might wonder:
*** Do I get the same version if I choose 0?
*** Seems like this cannot be downloaded for free.

update:

* https://www.gpg4win.org/get-gpg4win.html looks nice?
** don't add for simplicity:
*** "Add me to the list of sponsors (from 20,- EUR/USD up)"
*** "Feedback:"
** we have so many different downloads (ISO, VirtualBox, KVM, Windows installer), perhaps better based on a wiki template that can be used as a wrapper?
** todo discuss: not sure it's worth going through the complexity of paypal -> donate -> download link?
* https://elementary.io/
** looks nice?
* we have 3 examples: gpg4win, reactos, elementary os

'''DEV'''
* Suggestion
** Download button template has a parameter "modal". If set to true this opens our modal (this is just loaded once per js). Maybe admin says all downloads (that are not signatures) open the modal, then this parameter is obsolete
*** Patrick: Good idea.
** In this modal at the very top we say what they are downloading
*** Patrick: Good idea.
** Below that there is a donation appeal, with maybe the paypal module and a link to other payment options
*** Patrick: Please avoid big effort for paypal integration.
** Below that is the download button which is gray and not functioning and shows a countdown of 5 seconds. In these 5 seconds the users can read our donation appeal. After these 5 seconds the button becomes blue / green and says only "DOWNLOAD"
*** Patrick: Good. Please make it 3 seconds.
** I think this is pretty fair. There is no tricks, no "wrong clicking the donation link". Just a 5 second delay so the user even notices our donation appeal
*** Patrick: Yes.

== Content ==
=== Install Software ===
* https://www.kicksecure.com/wiki/Install_Software
* improve introduction so it can be used to answer https://www.reddit.com/r/Whonix/comments/1fr29g2/jdownloader_on_whonix/
** don't answer directly about jdownloader
** a generic answer on how to install software on Kicksecure, that is "same as on Debian" because Kicksecure is [[About#Based_on_Debian|Based on Debian]]

'''DEV'''
* DONE.
* A new info paragraph was written in a box
* Note: The whole page seems pretty confusing to a new user. Especially the headlines seem "erratic"

Patrick:

* this is a pretty important page
* please make the page less confusing
* please use <code><nowiki>{{Anchor|old title}}</nowiki></code> if renaming wiki chapters, to avoid breaking old links to wiki chapters

=== integrate into Documentation page (just linking) ===
wiki/Documentation

* https://www.kicksecure.com/wiki/User
* https://www.kicksecure.com/wiki/Login
* https://www.kicksecure.com/wiki/Timezone
* https://www.whonix.org/wiki/Timezone
* https://www.kicksecure.com/wiki/Advanced_Users

for:

* Kicksecure,
* Whonix

=== bugs, support, support status mininav ===
More mininav for the following:

* Which ones are useful to have in a mininav? Perhaps split support and the support statuses? (community support, unsupported, declined)

<div class="mininav">
* [[Documentation]]
* [[FAQ]]
* [[Support]]
* [[Please Use Search Engines And See Documentation First]]
* [[Reporting Bugs]]
* [[Advanced Documentation]]
* [[Community Support]]
* [[Unsupported]]
* [[Declined]]
</div>

=== Kicksecure About ===
https://www.kicksecure.com/wiki/About

* start using left/right images similar as on https://www.whonix.org/wiki/About

=== Please_Use_Search_Engines_And_See_Documentation_First ===
[[Please_Use_Search_Engines_And_See_Documentation_First]]

* Add more practical tips.
** Add a few search engines (same as on local browser homepages).
** Also mention AI (chatgpt, claude, perplexity) for search but add words of caution.
*** Tell user to not post screenshots of what perplexity is saying. Follow the information to the source.

=== VPN ===
* https://forums.whonix.org/t/new-vulnerabilities-in-vpns/20260
* https://citizenlab.ca/2024/07/vulnerabilities-in-vpns-paper-presented-at-the-privacy-enhancing-technologies-symposium-2024/

todo:

* integrate here:
* https://www.whonix.org/wiki/Whonix_versus_VPNs (summary)
* https://www.whonix.org/wiki/Tunnels/Introduction (shorter summary + link)

=== Strong_Linux_User_Account_Isolation (large content topic) ===
* https://www.kicksecure.com/wiki/Dev/Strong_Linux_User_Account_Isolation
* https://www.kicksecure.com/wiki/Root
* https://www.kicksecure.com/wiki/Dev/boot_modes
* https://www.kicksecure.com/wiki/Default_Passwords

tasks:

* Read.
* Ask what this is unclear.
* Add context where needed.
* Avoid "lost at hello" effect.
* Restructure where needed.
* goal: completely document Linux account user names, purposes and non-purposes, sudo myths

=== Troubleshooting ===
https://www.whonix.org/wiki/Troubleshooting

* Complete content review.
* Perhaps all should be part of the checklist? No separate wiki chapters.
* Probably not much point to separate out "Advanced Connectivity Troubleshooting Steps" in a different chapter.
* Perhaps https://www.whonix.org/wiki/Tor#Connectivity_Troubleshooting should be moved to Troubleshooting?
* Keep compatibility links when moving content.

= WAITING ON =
= REVIEW PLEASE =

== Slow loading Javascript problem ==

'''DEV'''

* On pages where a lot of Javascript is used the page can slow down significantly
* A report was done for [[Dev/mediawiki]] by using DebugViaUrlModal. Total time about 6000ms
** '''enhanceHeadlines +2300ms / 38%'''
*** 259 elements
*** content: Sharetooltip is added to each one
*** possibly time consuming: Sharetooltip creates Dom and adds event handler
** '''scrollAutoWrapper +1500ms / 25%'''
*** 79 elements
*** Custom scrollbar is being added
*** possibly time consuming: (1) scrollbar library (2) ObserverEventHandler (needed if an element is hidden at the start)
** '''CodeSelect +1000ms / 17%'''
*** 1420 elements
*** possibly time consuming: (1) code Highlighting (as with CodeMirror) (2) scrollbar library (3) events for functionality
** '''header +300ms / 5%'''
*** Not very important. Most scripts add 50 ms - 200 ms to loading
* Web workers were researched to use parallel processes - dead end, because web workers cannot access the main thread / Dom / events
* setTimeout method was explored + fixes were added
** setTimeout works, however the main problem is that the browser has no "time to breathe". Added setTimeout between the scripts helps, but for the main identified problem scripts, setTimeout might need to be applied to the individual "enrichment" of "time costly" elements

Patrick:

* use more setTimeout for the individual "enrichment"
* please document

'''DEV'''

* DONE
* Changes were done with great success. Report: On our [[Dev/website]]
** Dev tests before showed a blocked loading time of 6000ms to 6500ms
** Dev tests now show a <u>semi</u>-blocked loading time of 900ms to 1000ms
** Semi-blocking means that even in those 1000ms the user can interact with the page nicely because the browser "breathes" between the different scripts loads (work of yesterday) which was not the case before
** There are not many drawbacks. The page gradually enriches, but as we focussed on preventing content shift before the content does not shift but only changes slightly in appearance
** The only drawback is that currently the timing check is not very meaningful anymore, because it cannot account for the scripts anymore that are individually async
* Documentation here: [[Dev/mediawiki#Wiki_Load_Cascade_:_HTML.2C_CSS.2C_Javascript|Wiki Load Cascade : HTML, CSS, Javascript]]
* '''Todo Admin'''
** Check if everything is satisfactory
** Should something be done about the now inaccurate timing checks? - Dev could come up with something prob. in about 1-2 hours
* Patrick:
** yes, please.

'''DEV'''

* DONE
* Page loading was greatly improved
* page loading now outputs when the measuring starts and then outputs a detailled report when all expectedEvents are done
* For more details read updated documentation [[Dev/mediawiki#Performance_Testing|Performance Testing]]

= Footnotes =
{{reflist|close=1}}
[[Category:Development]]
{{Footer}}